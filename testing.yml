
params:
  - name: lambda # productivity
    value: 10
    min: 0.5
    max: 10
    round: 0.1

  - name: L
    value: 80
    min: 25
    max: 100
    round: 1

  - name: WS_intercept
    value: 1
    min: 0
    max: 10
    round: 1

  - name: WS_slope
    value: 4
    min: 0.1
    max: 5
    round: 0.1

  - name: epsilon
    value: 4
    min: 0.5
    max: 5
    round: 0.1

  - name: N_firms
    value: 10
    min: 1
    max: 25
    round: 1


calcs:
  mu: (1/params.epsilon)
  w: ((params.lambda)*(1 - calcs.mu))
  n_pop: params.L + params.N_firms
  L_graph: params.L * 1.1

  # Outcomes
  N_star: (params.L * (params.WS_intercept - params.lambda * (1 - calcs.mu))) / (params.WS_intercept - params.WS_slope - params.lambda*(1-calcs.mu))
  U_star: params.L - calcs.N_star
  U_star_share: calcs.U_star / calcs.n_pop
  E_star_share: calcs.N_star / calcs.n_pop
  U_E_star_share: calcs.U_star_share + calcs.E_star_share

  # Gini stuff
  total_earnings: calcs.N_star * params.lambda + calcs.U_star * params.WS_intercept
  U_star_earnings_share: (calcs.U_star * params.WS_intercept) / calcs.total_earnings
  E_star_earnings_share: (calcs.N_star * calcs.w) / calcs.total_earnings
  U_E_star_earnings_share: calcs.U_star_earnings_share + calcs.E_star_earnings_share
  B: (0.5*(calcs.U_star_share * calcs.U_star_earnings_share + (calcs.U_E_star_share - calcs.U_star_share)*(calcs.U_E_star_earnings_share + calcs.U_star_earnings_share) + (1 - calcs.U_E_star_share)*(calcs.U_E_star_earnings_share + 1))) # might be a mistake here?
  A: 0.5 - calcs.B
  Gini: (1-2*calcs.B)


layout:
  TwoVerticalGraphsPlusSidebar:
    topGraph:

      xAxis:
        min: 0
        max: 110
        title: Employment, N
        ticks: 5
      yAxis:
        intercept: 0
        max: 15
        title: Real wage, w
        ticks: 3


      objects:

      # BASIC GRAPH OBJECTS
      # Labour Force vertical line
      - Line:
          xIntercept: params.L
          color: "'#005cc8'"
          label:
            text: "LF"
            y: 0.85

      # MU
      - Arrow:
          begin: [100, calcs.w]
          end: [100, params.lambda]
          color: red
          double: True
          label:
            text: "\\mu"
            



      # CURVES
      # WS Curve
      - Curve:
          fn: "params.WS_intercept + x*params.WS_slope/(params.L - x)" # arbitrary WS curve but right shape
          color: "'#eb34c9'"
          label:
            text: "WS"
            align: l
            x: 2
            y: 10
          max: params.L
          

      # Productivity horizontal line
      - Line:
          slope: 0
          yIntercept: params.lambda
          color: "'#f14b4e'"
          label:
            text: "\\lambda"
            x: 110
          lineStyle: dashed

      # PS Curve
      - Line:
          slope: 0
          yIntercept: calcs.w
          color: "'#1e1e1e'"
          label:
            text: "PS"
            x: 110
            y: calcs.w

      # Equilibrium point
      - Point:
          coordinates: [calcs.N_star,calcs.w]
          color: black

      # Equilibrium employment on x-axis
      - Point:
          coordinates: [calcs.N_star,0]
          color: black
          label: 
            text: "N^*"

      # Line down to equilibrium employment
      - Segment:
          a: [calcs.N_star, 0]
          b: [calcs.N_star, calcs.w]
          lineStyle: dotted
          color: black


    bottomGraph:
      xAxis:
        max: 1
        title: Cumulative population, \%
        ticks: 4
      yAxis:
        max: 1
        title: Cumulative income, \%
        ticks: 3

      objects:

      # Perfect Equality line
      - Segment: 
          a: [0,0]
          b: [1,1]
          color: "'#1a1a1a'"
      
      # LORENZ CURVE
      # 1: Beginning-Unemployed segment
      - Segment: 
          a: [0, 0]
          b: [calcs.U_star_share, calcs.U_star_earnings_share]
          color: red

      # 2: Employed-Owners segment
      - Segment:
          a: [calcs.U_star_share, calcs.U_star_earnings_share]
          b: [calcs.U_E_star_share, calcs.U_E_star_earnings_share]
          color: red

      # 3: Owners-Final segment
      - Segment: 
          a: [calcs.U_E_star_share, calcs.U_E_star_earnings_share]
          b: [1,1]
          color: red

      ## SEPARATORS
      # U-E separator
      - Segment:
          a: [calcs.U_star_share, 0]
          b: [calcs.U_star_share, calcs.U_star_share]
          color: black

      # E-O separator
      - Segment:
          a: [calcs.U_E_star_share, 0]
          b: [calcs.U_E_star_share, calcs.U_E_star_share]
          color: black

      ### AREAS
      ## BELOW
      # First segment
      - Area:
          fn: x*calcs.U_star_earnings_share / calcs.U_star_share
          min: 0
          max: calcs.U_star_share
          fill: blue

      # Second segment
      - Area:
          fn: (calcs.U_star_share*calcs.U_E_star_earnings_share - calcs.U_E_star_share * calcs.U_star_earnings_share)/(calcs.U_star_share - calcs.U_E_star_share) + x*(calcs.U_star_earnings_share - calcs.U_E_star_earnings_share)/(calcs.U_star_share - calcs.U_E_star_share)
          min: calcs.U_star_share
          max: calcs.U_E_star_share
          fill: blue

      # Third segment
      - Area:
          fn: (calcs.U_E_star_share - calcs.U_E_star_earnings_share)/(calcs.U_E_star_share - 1) + x*(calcs.U_E_star_earnings_share-1)/(calcs.U_E_star_share-1)
          min: calcs.U_E_star_share
          max: 1
          fill: blue

      ## ABOVE
      # First Segment
      - Area:
          fn1: x*calcs.U_star_earnings_share / calcs.U_star_share
          fn2: (x)
          min: 0
          max: calcs.U_star_share
          fill: red

      # Second segment
      - Area:
          fn1: (calcs.U_star_share*calcs.U_E_star_earnings_share - calcs.U_E_star_share * calcs.U_star_earnings_share)/(calcs.U_star_share - calcs.U_E_star_share) + x*(calcs.U_star_earnings_share - calcs.U_E_star_earnings_share)/(calcs.U_star_share - calcs.U_E_star_share)
          fn2: (x)
          min: calcs.U_star_share
          max: calcs.U_E_star_share
          fill: red

      # Third segment
      - Area:
          fn1: (calcs.U_E_star_share - calcs.U_E_star_earnings_share)/(calcs.U_E_star_share - 1) + x*(calcs.U_E_star_earnings_share-1)/(calcs.U_E_star_share-1)
          fn2: (x)
          min: calcs.U_E_star_share
          max: 1
          fill: red


    sidebar:
      controls:
      - title:  Wage-setting and Price-setting Curves
        divs:      
          - html: "`$$w^{WS} = \\\\alpha + N*\\\\frac{\\\\beta}{L-N}$$`"  
          - html: "`$$w^{PS} = \\\\lambda*(1-\\\\mu)$$`"  
       

      
      - title:  Parameters
        sliders:
        - {param: lambda, label: "\\text{Productivity}: \\lambda"}
        - {param: epsilon, label: "\\text{Elasticity}: \\varepsilon"}
        - {param: L, label: "\\text{Labour Force}: L"}
        - {param: WS_intercept, label: "\\text{WS Intercept}: \\alpha"}
        - {param: WS_slope, label: "\\text{WS Slope}: \\beta"}
        - {param: N_firms, label: "\\text{Number of firms/owners}: N"}

      - title:  Outcomes
        divs: 
          - html: "`<p>$$G=${calcs.Gini.toFixed(2)}$$</p>
                    <p>$$w^*=${calcs.w.toFixed(2)}$$</p>
                    <p>$$N^*=${calcs.N_star.toFixed(2)}$$</p>`"

          - html: "`<table>
                    <thead>
                      <tr>
                        <td></td>
                        <td>Number</td>
                        <td>Population<br/>Share</td>
                        <td>Total<br/>Income</td>
                        <td>Income<br/> Share</td>
                      </tr></thead>
                    <tbody>
                      <tr>
                        <td>Unemployed</td>
                        <td>${((calcs.U_star_share)*params.L).toFixed(2)}</td>
                        <td>${(calcs.U_star_share*100).toFixed(2)}%</td>
                        <td>${(params.WS_slope*calcs.U_star_share*params.L).toFixed(2)}</td>
                        <td>${(calcs.U_star_earnings_share*100).toFixed(2)}%</td>
                      </tr>
                      <tr>
                        <td>Employed</td>
                        <td>${((calcs.E_star_share)*params.L).toFixed(2)}</td>
                        <td>${(calcs.E_star_share*100).toFixed(2)}%</td>
                        <td>${(calcs.w*calcs.E_star_share*params.L).toFixed(2)}</td>
                        <td>${(calcs.E_star_earnings_share*100).toFixed(2)}%</td>
                      </tr>
                      <tr>
                        <td>Employers</td>
                        <td>${params.N_firms}</td>
                        <td>${(100*params.N_firms/calcs.n_pop).toFixed(2)}%</td>
                        <td>${((params.lambda - calcs.w)*params.N_firms).toFixed(2)}</td>
                        <td>${((1-calcs.U_E_star_earnings_share)*100).toFixed(2)}%</td>
                      </tr>
                    </tbody>
                    </table>`"

