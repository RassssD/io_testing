}
calc_group_gini(df)
## Lorenz Curves
df <- df[order(df$Group, df$Income),]
df <- df %>% group_by(Group) %>% mutate(Cum_Income_Share = cumsum(Income) / sum(Income)) %>% ungroup()
df_draw_men <- df %>% filter(Group == "Man")
cum_inc_share_men <- c(0) %>% append(df_draw_men$Cum_Income_Share)
df_draw_women <- df %>% filter(Group == "Woman")
cum_inc_share_women <- c(0) %>% append(df_draw_women$Cum_Income_Share)
df <- df[order(df$Income),]
df <- df %>% mutate(Cum_Income_Share_All = cumsum(Income) / sum(Income))
cum_inc_share_all <- c(0) %>% append(df$Cum_Income_Share_All)
steps = seq(0, 1, by=1/n_indivs)
steps_all = seq(0, 1, by=0.5/n_indivs)
plot(x=c(steps, steps, steps, steps_all),
y=c(steps, cum_inc_share_men, cum_inc_share_women, cum_inc_share_all),
type='l', xlab="Cumulative Population", ylab="Cumulative Income", col=1:2)
plot(x=steps, y=steps,
type="l", col=1, lty=2, lwd=2,
xlab="Cumulative Population", ylab="Cumulative Income",
xlim = c(0,1), ylim = c(0,1), xaxs="i", yaxs="i")
lines(x=steps, y=cum_inc_share_women, col=2, type="l", lwd=2)
lines(x=steps, y=cum_inc_share_men, col=4, type="l", lwd=2)
lines(x=steps_all, y=cum_inc_share_all, col=6, type="l", lwd=2)
legend(x = "topleft",         # Position
legend = c("Equality", "Women", "Men", "All"), # Legend texts
lty = c(2, 1, 1, 1),
col = c(1, 2, 4, 3),
lwd = 2)
library(comprehenr)
library(tidyverse)
library(ggplot2)
# N indivs in each group
n_indivs = 5
base_income_woman = 1
base_income_man = 2*base_income_woman
income_step = 0.25
n_indivs_step = floor(n_indivs/2)
incomes_woman = to_vec(for(i in -n_indivs_step:n_indivs_step) base_income_woman + income_step * i)
incomes_man = to_vec(for(i in -n_indivs_step:n_indivs_step) base_income_man + 2*income_step * i)
incomes_woman <- c(0,0.5,0.75,1,2)
incomes_woman <- c(1,1.5,2,2.5,5)
group_woman <- to_vec(for(i in 1:n_indivs) "Woman")
group_man <- to_vec(for(i in 1:n_indivs) "Man")
df = data.frame(c(incomes_man, incomes_woman), c(group_man, group_woman))
colnames(df) <- c("Income", "Group")
# Calculate total Gini
calc_total_gini <- function(dataframe){
# Get incomes
incomes = dataframe$Income
n = length(incomes)
# Need to divide and multiply to divide by the right amount and get the correct mean
mad = sum(as.numeric(dist(incomes))) / (0.5 * n^2)
rmad = mad / mean(incomes)
gini = 0.5 * rmad * n/(n-1)
# Get all possible pairs
return(gini)
}
calc_total_gini(df)
calc_group_gini <- function(dataframe){
df_gini <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(df_gini) <- c("Group", "Gini")
# Calculate total Gini and add
total_gini <- calc_total_gini(dataframe)
df_gini[nrow(df_gini) + 1,] = list(Group = "All", Gini = total_gini)
# Iterate over groups
for(group in unique(dataframe$Group)){
# Calculate group Gini
df_group <- df %>% filter(Group == group)
group_gini <- calc_total_gini(df_group)
# Add to group
df_gini[nrow(df_gini) + 1,] = list(Group = group, Gini = group_gini)
}
return(df_gini)
}
calc_group_gini(df)
## Lorenz Curves
df <- df[order(df$Group, df$Income),]
df <- df %>% group_by(Group) %>% mutate(Cum_Income_Share = cumsum(Income) / sum(Income)) %>% ungroup()
df_draw_men <- df %>% filter(Group == "Man")
cum_inc_share_men <- c(0) %>% append(df_draw_men$Cum_Income_Share)
df_draw_women <- df %>% filter(Group == "Woman")
cum_inc_share_women <- c(0) %>% append(df_draw_women$Cum_Income_Share)
df <- df[order(df$Income),]
df <- df %>% mutate(Cum_Income_Share_All = cumsum(Income) / sum(Income))
cum_inc_share_all <- c(0) %>% append(df$Cum_Income_Share_All)
steps = seq(0, 1, by=1/n_indivs)
steps_all = seq(0, 1, by=0.5/n_indivs)
plot(x=c(steps, steps, steps, steps_all),
y=c(steps, cum_inc_share_men, cum_inc_share_women, cum_inc_share_all),
type='l', xlab="Cumulative Population", ylab="Cumulative Income", col=1:2)
plot(x=steps, y=steps,
type="l", col=1, lty=2, lwd=2,
xlab="Cumulative Population", ylab="Cumulative Income",
xlim = c(0,1), ylim = c(0,1), xaxs="i", yaxs="i")
lines(x=steps, y=cum_inc_share_women, col=2, type="l", lwd=2)
lines(x=steps, y=cum_inc_share_men, col=4, type="l", lwd=2)
lines(x=steps_all, y=cum_inc_share_all, col=7, type="l", lwd=2)
legend(x = "topleft",         # Position
legend = c("Equality", "Women", "Men", "All"), # Legend texts
lty = c(2, 1, 1, 1),
col = c(1, 2, 4, 3),
lwd = 2)
library(comprehenr)
library(tidyverse)
library(ggplot2)
# N indivs in each group
n_indivs = 5
base_income_woman = 1
base_income_man = 2*base_income_woman
income_step = 0.25
n_indivs_step = floor(n_indivs/2)
incomes_woman = to_vec(for(i in -n_indivs_step:n_indivs_step) base_income_woman + income_step * i)
incomes_man = to_vec(for(i in -n_indivs_step:n_indivs_step) base_income_man + 2*income_step * i)
incomes_woman <- c(0,0.5,0.75,1,2)
incomes_woman <- c(1,1.5,2,2.5,5)
group_woman <- to_vec(for(i in 1:n_indivs) "Woman")
group_man <- to_vec(for(i in 1:n_indivs) "Man")
df = data.frame(c(incomes_man, incomes_woman), c(group_man, group_woman))
colnames(df) <- c("Income", "Group")
# Calculate total Gini
calc_total_gini <- function(dataframe){
# Get incomes
incomes = dataframe$Income
n = length(incomes)
# Need to divide and multiply to divide by the right amount and get the correct mean
mad = sum(as.numeric(dist(incomes))) / (0.5 * n^2)
rmad = mad / mean(incomes)
gini = 0.5 * rmad * n/(n-1)
# Get all possible pairs
return(gini)
}
calc_total_gini(df)
calc_group_gini <- function(dataframe){
df_gini <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(df_gini) <- c("Group", "Gini")
# Calculate total Gini and add
total_gini <- calc_total_gini(dataframe)
df_gini[nrow(df_gini) + 1,] = list(Group = "All", Gini = total_gini)
# Iterate over groups
for(group in unique(dataframe$Group)){
# Calculate group Gini
df_group <- df %>% filter(Group == group)
group_gini <- calc_total_gini(df_group)
# Add to group
df_gini[nrow(df_gini) + 1,] = list(Group = group, Gini = group_gini)
}
return(df_gini)
}
calc_group_gini(df)
## Lorenz Curves
df <- df[order(df$Group, df$Income),]
df <- df %>% group_by(Group) %>% mutate(Cum_Income_Share = cumsum(Income) / sum(Income)) %>% ungroup()
df_draw_men <- df %>% filter(Group == "Man")
cum_inc_share_men <- c(0) %>% append(df_draw_men$Cum_Income_Share)
df_draw_women <- df %>% filter(Group == "Woman")
cum_inc_share_women <- c(0) %>% append(df_draw_women$Cum_Income_Share)
df <- df[order(df$Income),]
df <- df %>% mutate(Cum_Income_Share_All = cumsum(Income) / sum(Income))
cum_inc_share_all <- c(0) %>% append(df$Cum_Income_Share_All)
steps = seq(0, 1, by=1/n_indivs)
steps_all = seq(0, 1, by=0.5/n_indivs)
plot(x=c(steps, steps, steps, steps_all),
y=c(steps, cum_inc_share_men, cum_inc_share_women, cum_inc_share_all),
type='l', xlab="Cumulative Population", ylab="Cumulative Income", col=1:2)
plot(x=steps, y=steps,
type="l", col=1, lty=2, lwd=2,
xlab="Cumulative Population", ylab="Cumulative Income",
xlim = c(0,1), ylim = c(0,1), xaxs="i", yaxs="i")
lines(x=steps, y=cum_inc_share_women, col=2, type="l", lwd=2)
lines(x=steps, y=cum_inc_share_men, col=4, type="l", lwd=2)
lines(x=steps_all, y=cum_inc_share_all, col=8, type="l", lwd=2)
legend(x = "topleft",         # Position
legend = c("Equality", "Women", "Men", "All"), # Legend texts
lty = c(2, 1, 1, 1),
col = c(1, 2, 4, 3),
lwd = 2)
library(comprehenr)
library(tidyverse)
library(ggplot2)
# N indivs in each group
n_indivs = 5
base_income_woman = 1
base_income_man = 2*base_income_woman
income_step = 0.25
n_indivs_step = floor(n_indivs/2)
incomes_woman = to_vec(for(i in -n_indivs_step:n_indivs_step) base_income_woman + income_step * i)
incomes_man = to_vec(for(i in -n_indivs_step:n_indivs_step) base_income_man + 2*income_step * i)
incomes_woman <- c(0,0.5,0.75,1,2)
incomes_woman <- c(1,1.5,2,2.5,5)
group_woman <- to_vec(for(i in 1:n_indivs) "Woman")
group_man <- to_vec(for(i in 1:n_indivs) "Man")
df = data.frame(c(incomes_man, incomes_woman), c(group_man, group_woman))
colnames(df) <- c("Income", "Group")
# Calculate total Gini
calc_total_gini <- function(dataframe){
# Get incomes
incomes = dataframe$Income
n = length(incomes)
# Need to divide and multiply to divide by the right amount and get the correct mean
mad = sum(as.numeric(dist(incomes))) / (0.5 * n^2)
rmad = mad / mean(incomes)
gini = 0.5 * rmad * n/(n-1)
# Get all possible pairs
return(gini)
}
calc_total_gini(df)
calc_group_gini <- function(dataframe){
df_gini <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(df_gini) <- c("Group", "Gini")
# Calculate total Gini and add
total_gini <- calc_total_gini(dataframe)
df_gini[nrow(df_gini) + 1,] = list(Group = "All", Gini = total_gini)
# Iterate over groups
for(group in unique(dataframe$Group)){
# Calculate group Gini
df_group <- df %>% filter(Group == group)
group_gini <- calc_total_gini(df_group)
# Add to group
df_gini[nrow(df_gini) + 1,] = list(Group = group, Gini = group_gini)
}
return(df_gini)
}
calc_group_gini(df)
## Lorenz Curves
df <- df[order(df$Group, df$Income),]
df <- df %>% group_by(Group) %>% mutate(Cum_Income_Share = cumsum(Income) / sum(Income)) %>% ungroup()
df_draw_men <- df %>% filter(Group == "Man")
cum_inc_share_men <- c(0) %>% append(df_draw_men$Cum_Income_Share)
df_draw_women <- df %>% filter(Group == "Woman")
cum_inc_share_women <- c(0) %>% append(df_draw_women$Cum_Income_Share)
df <- df[order(df$Income),]
df <- df %>% mutate(Cum_Income_Share_All = cumsum(Income) / sum(Income))
cum_inc_share_all <- c(0) %>% append(df$Cum_Income_Share_All)
steps = seq(0, 1, by=1/n_indivs)
steps_all = seq(0, 1, by=0.5/n_indivs)
plot(x=c(steps, steps, steps, steps_all),
y=c(steps, cum_inc_share_men, cum_inc_share_women, cum_inc_share_all),
type='l', xlab="Cumulative Population", ylab="Cumulative Income", col=1:2)
plot(x=steps, y=steps,
type="l", col=1, lty=2, lwd=2,
xlab="Cumulative Population", ylab="Cumulative Income",
xlim = c(0,1), ylim = c(0,1), xaxs="i", yaxs="i")
lines(x=steps, y=cum_inc_share_women, col=2, type="l", lwd=2)
lines(x=steps, y=cum_inc_share_men, col=4, type="l", lwd=2)
lines(x=steps_all, y=cum_inc_share_all, col=9, type="l", lwd=2)
legend(x = "topleft",         # Position
legend = c("Equality", "Women", "Men", "All"), # Legend texts
lty = c(2, 1, 1, 1),
col = c(1, 2, 4, 3),
lwd = 2)
library(comprehenr)
library(tidyverse)
library(ggplot2)
# N indivs in each group
n_indivs = 5
base_income_woman = 1
base_income_man = 2*base_income_woman
income_step = 0.25
n_indivs_step = floor(n_indivs/2)
incomes_woman = to_vec(for(i in -n_indivs_step:n_indivs_step) base_income_woman + income_step * i)
incomes_man = to_vec(for(i in -n_indivs_step:n_indivs_step) base_income_man + 2*income_step * i)
incomes_woman <- c(0,0.5,0.75,1,2)
incomes_woman <- c(1,1.5,2,2.5,5)
group_woman <- to_vec(for(i in 1:n_indivs) "Woman")
group_man <- to_vec(for(i in 1:n_indivs) "Man")
df = data.frame(c(incomes_man, incomes_woman), c(group_man, group_woman))
colnames(df) <- c("Income", "Group")
# Calculate total Gini
calc_total_gini <- function(dataframe){
# Get incomes
incomes = dataframe$Income
n = length(incomes)
# Need to divide and multiply to divide by the right amount and get the correct mean
mad = sum(as.numeric(dist(incomes))) / (0.5 * n^2)
rmad = mad / mean(incomes)
gini = 0.5 * rmad * n/(n-1)
# Get all possible pairs
return(gini)
}
calc_total_gini(df)
calc_group_gini <- function(dataframe){
df_gini <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(df_gini) <- c("Group", "Gini")
# Calculate total Gini and add
total_gini <- calc_total_gini(dataframe)
df_gini[nrow(df_gini) + 1,] = list(Group = "All", Gini = total_gini)
# Iterate over groups
for(group in unique(dataframe$Group)){
# Calculate group Gini
df_group <- df %>% filter(Group == group)
group_gini <- calc_total_gini(df_group)
# Add to group
df_gini[nrow(df_gini) + 1,] = list(Group = group, Gini = group_gini)
}
return(df_gini)
}
calc_group_gini(df)
## Lorenz Curves
df <- df[order(df$Group, df$Income),]
df <- df %>% group_by(Group) %>% mutate(Cum_Income_Share = cumsum(Income) / sum(Income)) %>% ungroup()
df_draw_men <- df %>% filter(Group == "Man")
cum_inc_share_men <- c(0) %>% append(df_draw_men$Cum_Income_Share)
df_draw_women <- df %>% filter(Group == "Woman")
cum_inc_share_women <- c(0) %>% append(df_draw_women$Cum_Income_Share)
df <- df[order(df$Income),]
df <- df %>% mutate(Cum_Income_Share_All = cumsum(Income) / sum(Income))
cum_inc_share_all <- c(0) %>% append(df$Cum_Income_Share_All)
steps = seq(0, 1, by=1/n_indivs)
steps_all = seq(0, 1, by=0.5/n_indivs)
plot(x=c(steps, steps, steps, steps_all),
y=c(steps, cum_inc_share_men, cum_inc_share_women, cum_inc_share_all),
type='l', xlab="Cumulative Population", ylab="Cumulative Income", col=1:2)
plot(x=steps, y=steps,
type="l", col=1, lty=2, lwd=2,
xlab="Cumulative Population", ylab="Cumulative Income",
xlim = c(0,1), ylim = c(0,1), xaxs="i", yaxs="i")
lines(x=steps, y=cum_inc_share_women, col=2, type="l", lwd=2)
lines(x=steps, y=cum_inc_share_men, col=4, type="l", lwd=2)
lines(x=steps_all, y=cum_inc_share_all, col=1, type="l", lwd=2)
legend(x = "topleft",         # Position
legend = c("Equality", "Women", "Men", "All"), # Legend texts
lty = c(2, 1, 1, 1),
col = c(1, 2, 4, 3),
lwd = 2)
library(comprehenr)
library(tidyverse)
library(ggplot2)
# N indivs in each group
n_indivs = 5
base_income_woman = 1
base_income_man = 2*base_income_woman
income_step = 0.25
n_indivs_step = floor(n_indivs/2)
incomes_woman = to_vec(for(i in -n_indivs_step:n_indivs_step) base_income_woman + income_step * i)
incomes_man = to_vec(for(i in -n_indivs_step:n_indivs_step) base_income_man + 2*income_step * i)
incomes_woman <- c(0,0.5,0.75,1,2)
incomes_woman <- c(1,1.5,2,2.5,5)
group_woman <- to_vec(for(i in 1:n_indivs) "Woman")
group_man <- to_vec(for(i in 1:n_indivs) "Man")
df = data.frame(c(incomes_man, incomes_woman), c(group_man, group_woman))
colnames(df) <- c("Income", "Group")
# Calculate total Gini
calc_total_gini <- function(dataframe){
# Get incomes
incomes = dataframe$Income
n = length(incomes)
# Need to divide and multiply to divide by the right amount and get the correct mean
mad = sum(as.numeric(dist(incomes))) / (0.5 * n^2)
rmad = mad / mean(incomes)
gini = 0.5 * rmad * n/(n-1)
# Get all possible pairs
return(gini)
}
calc_total_gini(df)
calc_group_gini <- function(dataframe){
df_gini <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(df_gini) <- c("Group", "Gini")
# Calculate total Gini and add
total_gini <- calc_total_gini(dataframe)
df_gini[nrow(df_gini) + 1,] = list(Group = "All", Gini = total_gini)
# Iterate over groups
for(group in unique(dataframe$Group)){
# Calculate group Gini
df_group <- df %>% filter(Group == group)
group_gini <- calc_total_gini(df_group)
# Add to group
df_gini[nrow(df_gini) + 1,] = list(Group = group, Gini = group_gini)
}
return(df_gini)
}
calc_group_gini(df)
## Lorenz Curves
df <- df[order(df$Group, df$Income),]
df <- df %>% group_by(Group) %>% mutate(Cum_Income_Share = cumsum(Income) / sum(Income)) %>% ungroup()
df_draw_men <- df %>% filter(Group == "Man")
cum_inc_share_men <- c(0) %>% append(df_draw_men$Cum_Income_Share)
df_draw_women <- df %>% filter(Group == "Woman")
cum_inc_share_women <- c(0) %>% append(df_draw_women$Cum_Income_Share)
df <- df[order(df$Income),]
df <- df %>% mutate(Cum_Income_Share_All = cumsum(Income) / sum(Income))
cum_inc_share_all <- c(0) %>% append(df$Cum_Income_Share_All)
steps = seq(0, 1, by=1/n_indivs)
steps_all = seq(0, 1, by=0.5/n_indivs)
plot(x=c(steps, steps, steps, steps_all),
y=c(steps, cum_inc_share_men, cum_inc_share_women, cum_inc_share_all),
type='l', xlab="Cumulative Population", ylab="Cumulative Income", col=1:2)
plot(x=steps, y=steps,
type="l", col=1, lty=2, lwd=2,
xlab="Cumulative Population", ylab="Cumulative Income",
xlim = c(0,1), ylim = c(0,1), xaxs="i", yaxs="i")
lines(x=steps, y=cum_inc_share_women, col=2, type="l", lwd=2)
lines(x=steps, y=cum_inc_share_men, col=4, type="l", lwd=2)
lines(x=steps_all, y=cum_inc_share_all, col=1, type="l", lwd=2)
legend(x = "topleft",         # Position
legend = c("Equality", "Women", "Men", "All"), # Legend texts
lty = c(2, 1, 1, 1),
col = c(1, 2, 4, 1),
lwd = 2)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
library(shiny)
runApp("my_app")
runApp()
wp
wp()
wd()
dir
dir()
runApp("app.R")
library(shiny)
shiny::runApp("app.R")
library(shiny)
library(shiny)
library(shiny)
install.packages("htmltools")
install.packages("htmltools")
library(shiny)
install.packages("shiny")
install.packages("shiny")
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#007bc2", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
runApp("Testing App")
runApp("/Testing App")
runApp("/Testing App/app.R")
runApp("Testing App/app.R")
runApp("app.R")
dir
dir()
runApp("Shiny App test/Testing App/app.R")
runApp("Shiny App test/Testing App")
runApp("Shiny App test/Testing App")
runApp("Shiny App test/Testing App/app.R")
runApp("Shiny App test/Testing App/app.R")
runApp("Shiny App test/Testing App/app.R")
runExample("02_text")
runExample("09_upload")
runExample("03_reactivity")
runApp('Shiny App test/Testing App')
runApp('Shiny App test/Testing App')
floor(4)
floor(4/2)
floor(3/2)
runApp('Shiny App test/Testing App')
min(1,0)
runApp('Shiny App test/Testing App')
shinylive::export(appdir = "myapp", destdir = "docs")
setwd("C:/Programming/Code/Wendy-RA/Working/Pages/Fair_Inequality/myapp")
shinylive::export(appdir = "myapp", destdir = "docs")
dir()
setwd("C:/Programming/Code/Wendy-RA/Working/Pages/Fair_Inequality")
dir()
shinylive::export(appdir = "myapp", destdir = "docs")
