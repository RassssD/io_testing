x_max = max(df_data$ValParam)
y_min = 0 # floor(min(df_data$ShareFair) / step_param) * step_param
y_max = 100 # min(ceiling(max(df_data$ShareFair) / step_param) * step_param, 100)
# Plot
df_data %>% group_by(ValParam, Group) %>% mutate(Mean_SF = mean(ShareFair)) %>%
ggplot(aes(x=ValParam, y = Mean_SF, color=Group)) +
#geom_line(size = 1) +
geom_smooth(size = 1, se=FALSE, formula = y ~ poly(x, 2)) +
theme_classic() +
theme(title = element_text(size = 15), plot.title = element_text(hjust = 0.5), legend.position = "none") +
scale_color_manual(values=c("black", "blue", "red")) +
scale_x_continuous(limits=c(x_min, x_max), expand = c(0,0)) + scale_y_continuous(limits=c(y_min,y_max), expand = c(0,0)) +
xlab(param) + ylab("Mean Fair Share (%)") #+
#ggtitle(sprintf("Total Inequality, Varying %s", param))
}
# phi
plot_gini_phi = plot_gini(select_pregen_inc_data(df_preload_data, val_GG = val_GG, val_var = val_var, n_select = 10), "Phi")
plot_SF_phi = plot_SF(select_pregen_inc_data(df_preload_data, val_GG = val_GG, val_var = val_var, n_select = 10), "Phi")
# GG
plot_gini_GG = plot_gini(select_pregen_inc_data(df_preload_data, val_phi = val_phi, val_var = val_var, n_select = 10), "GG")
plot_SF_GG = plot_SF(select_pregen_inc_data(df_preload_data, val_phi = val_phi, val_var = val_var, n_select = 10), "GG")
# Var
plot_gini_var = plot_gini(select_pregen_inc_data(df_preload_data, val_phi = val_phi, val_GG = val_GG, n_select = 10), "Var")
plot_SF_var = plot_SF(select_pregen_inc_data(df_preload_data, val_phi = val_phi, val_GG = val_GG, n_select = 10), "Var")
# all together
plots = c(plot_gini_phi, plot_gini_GG, plot_gini_var, plot_SF_phi, plot_SF_GG, plot_SF_var)
plot_grid(plot_gini_phi, plot_gini_GG, plot_gini_var, plot_SF_phi, plot_SF_GG, plot_SF_var,
ncol=3, nrow=2)
# Function for plotting the Share Fair
plot_SF = function(df_data, param) {
step_param = 25
x_min = min(df_data$ValParam)
x_max = max(df_data$ValParam)
y_min = 0 # floor(min(df_data$ShareFair) / step_param) * step_param
y_max = 100 # min(ceiling(max(df_data$ShareFair) / step_param) * step_param, 100)
# Plot
df_data %>% group_by(ValParam, Group) %>% mutate(Mean_SF = mean(ShareFair)) %>%
ggplot(aes(x=ValParam, y = Mean_SF, color=Group)) +
#geom_line(size = 1) +
geom_smooth(size = 1, se=FALSE, formula = y ~ poly(x, 3, raw=TRUE)) +
theme_classic() +
theme(title = element_text(size = 15), plot.title = element_text(hjust = 0.5), legend.position = "none") +
scale_color_manual(values=c("black", "blue", "red")) +
scale_x_continuous(limits=c(x_min, x_max), expand = c(0,0)) + scale_y_continuous(limits=c(y_min,y_max), expand = c(0,0)) +
xlab(param) + ylab("Mean Fair Share (%)") #+
#ggtitle(sprintf("Total Inequality, Varying %s", param))
}
plot_gini_phi = plot_gini(select_pregen_inc_data(df_preload_data, val_GG = val_GG, val_var = val_var, n_select = 10), "Phi")
plot_SF_phi = plot_SF(select_pregen_inc_data(df_preload_data, val_GG = val_GG, val_var = val_var, n_select = 10), "Phi")
# GG
plot_gini_GG = plot_gini(select_pregen_inc_data(df_preload_data, val_phi = val_phi, val_var = val_var, n_select = 10), "GG")
plot_SF_GG = plot_SF(select_pregen_inc_data(df_preload_data, val_phi = val_phi, val_var = val_var, n_select = 10), "GG")
# Var
plot_gini_var = plot_gini(select_pregen_inc_data(df_preload_data, val_phi = val_phi, val_GG = val_GG, n_select = 10), "Var")
plot_SF_var = plot_SF(select_pregen_inc_data(df_preload_data, val_phi = val_phi, val_GG = val_GG, n_select = 10), "Var")
# all together
plots = c(plot_gini_phi, plot_gini_GG, plot_gini_var, plot_SF_phi, plot_SF_GG, plot_SF_var)
plot_grid(plot_gini_phi, plot_gini_GG, plot_gini_var, plot_SF_phi, plot_SF_GG, plot_SF_var,
ncol=3, nrow=2)
# Function for plotting the Share Fair
plot_SF = function(df_data, param) {
step_param = 25
x_min = min(df_data$ValParam)
x_max = max(df_data$ValParam)
y_min = 0 # floor(min(df_data$ShareFair) / step_param) * step_param
y_max = 100 # min(ceiling(max(df_data$ShareFair) / step_param) * step_param, 100)
# Plot
df_data %>% group_by(ValParam, Group) %>% mutate(Mean_SF = mean(ShareFair)) %>%
ggplot(aes(x=ValParam, y = Mean_SF, color=Group)) +
#geom_line(size = 1) +
geom_smooth(size = 1, se=FALSE, formula = y ~ x + x^2 + x^3) +
theme_classic() +
theme(title = element_text(size = 15), plot.title = element_text(hjust = 0.5), legend.position = "none") +
scale_color_manual(values=c("black", "blue", "red")) +
scale_x_continuous(limits=c(x_min, x_max), expand = c(0,0)) + scale_y_continuous(limits=c(y_min,y_max), expand = c(0,0)) +
xlab(param) + ylab("Mean Fair Share (%)") #+
#ggtitle(sprintf("Total Inequality, Varying %s", param))
}
plot_gini_phi = plot_gini(select_pregen_inc_data(df_preload_data, val_GG = val_GG, val_var = val_var, n_select = 10), "Phi")
plot_SF_phi = plot_SF(select_pregen_inc_data(df_preload_data, val_GG = val_GG, val_var = val_var, n_select = 10), "Phi")
# GG
plot_gini_GG = plot_gini(select_pregen_inc_data(df_preload_data, val_phi = val_phi, val_var = val_var, n_select = 10), "GG")
plot_SF_GG = plot_SF(select_pregen_inc_data(df_preload_data, val_phi = val_phi, val_var = val_var, n_select = 10), "GG")
# Var
plot_gini_var = plot_gini(select_pregen_inc_data(df_preload_data, val_phi = val_phi, val_GG = val_GG, n_select = 10), "Var")
plot_SF_var = plot_SF(select_pregen_inc_data(df_preload_data, val_phi = val_phi, val_GG = val_GG, n_select = 10), "Var")
# all together
plots = c(plot_gini_phi, plot_gini_GG, plot_gini_var, plot_SF_phi, plot_SF_GG, plot_SF_var)
plot_grid(plot_gini_phi, plot_gini_GG, plot_gini_var, plot_SF_phi, plot_SF_GG, plot_SF_var,
ncol=3, nrow=2)
# Function for plotting the Gini
plot_gini = function(df_data, param) {
step_param = 0.25
x_min = min(df_data$ValParam)
x_max = max(df_data$ValParam)
y_min = 0 # floor(min(df_data$Total) / step_param) * step_param
y_max = 1 # min(ceiling(max(df_data$Total) / step_param) * step_param, 1)
# Plot
df_data %>% group_by(ValParam, Group) %>% mutate(Mean_Gini = mean(Total)) %>%
ggplot(aes(x=ValParam, y = Mean_Gini, color=Group)) +
#geom_line(size = 1) +
geom_smooth(size = 1, se=FALSE, formula = y ~ x + x^2 + x^3) +
theme_classic() +
theme(title = element_text(size = 15), plot.title = element_text(hjust = 0.5), legend.position = "none") +
scale_color_manual(values=c("black", "blue", "red")) +
scale_x_continuous(limits=c(x_min, x_max), expand = c(0,0)) + scale_y_continuous(limits=c(y_min,y_max), expand = c(0,0)) +
xlab(param) + ylab("Mean Gini") #+
#ggtitle(sprintf("Total Inequality, Varying %s", param))
}
val_phi = 0.9
val_GG = 0
val_var = 1
# phi
plot_gini_phi = plot_gini(select_pregen_inc_data(df_preload_data, val_GG = val_GG, val_var = val_var, n_select = 10), "Phi")
plot_SF_phi = plot_SF(select_pregen_inc_data(df_preload_data, val_GG = val_GG, val_var = val_var, n_select = 10), "Phi")
# GG
plot_gini_GG = plot_gini(select_pregen_inc_data(df_preload_data, val_phi = val_phi, val_var = val_var, n_select = 10), "GG")
plot_SF_GG = plot_SF(select_pregen_inc_data(df_preload_data, val_phi = val_phi, val_var = val_var, n_select = 10), "GG")
# Var
plot_gini_var = plot_gini(select_pregen_inc_data(df_preload_data, val_phi = val_phi, val_GG = val_GG, n_select = 10), "Var")
plot_SF_var = plot_SF(select_pregen_inc_data(df_preload_data, val_phi = val_phi, val_GG = val_GG, n_select = 10), "Var")
# all together
plots = c(plot_gini_phi, plot_gini_GG, plot_gini_var, plot_SF_phi, plot_SF_GG, plot_SF_var)
plot_grid(plot_gini_phi, plot_gini_GG, plot_gini_var, plot_SF_phi, plot_SF_GG, plot_SF_var,
ncol=3, nrow=2)
val_phi = 0.9
val_GG = 0.5
val_var = 1
# phi
plot_gini_phi = plot_gini(select_pregen_inc_data(df_preload_data, val_GG = val_GG, val_var = val_var, n_select = 10), "Phi")
plot_SF_phi = plot_SF(select_pregen_inc_data(df_preload_data, val_GG = val_GG, val_var = val_var, n_select = 10), "Phi")
# GG
plot_gini_GG = plot_gini(select_pregen_inc_data(df_preload_data, val_phi = val_phi, val_var = val_var, n_select = 10), "GG")
plot_SF_GG = plot_SF(select_pregen_inc_data(df_preload_data, val_phi = val_phi, val_var = val_var, n_select = 10), "GG")
# Var
plot_gini_var = plot_gini(select_pregen_inc_data(df_preload_data, val_phi = val_phi, val_GG = val_GG, n_select = 10), "Var")
plot_SF_var = plot_SF(select_pregen_inc_data(df_preload_data, val_phi = val_phi, val_GG = val_GG, n_select = 10), "Var")
# all together
plots = c(plot_gini_phi, plot_gini_GG, plot_gini_var, plot_SF_phi, plot_SF_GG, plot_SF_var)
plot_grid(plot_gini_phi, plot_gini_GG, plot_gini_var, plot_SF_phi, plot_SF_GG, plot_SF_var,
ncol=3, nrow=2)
val_phi = 0
val_GG = 0.5
val_var = 1
# phi
plot_gini_phi = plot_gini(select_pregen_inc_data(df_preload_data, val_GG = val_GG, val_var = val_var, n_select = 10), "Phi")
plot_SF_phi = plot_SF(select_pregen_inc_data(df_preload_data, val_GG = val_GG, val_var = val_var, n_select = 10), "Phi")
# GG
plot_gini_GG = plot_gini(select_pregen_inc_data(df_preload_data, val_phi = val_phi, val_var = val_var, n_select = 10), "GG")
plot_SF_GG = plot_SF(select_pregen_inc_data(df_preload_data, val_phi = val_phi, val_var = val_var, n_select = 10), "GG")
# Var
plot_gini_var = plot_gini(select_pregen_inc_data(df_preload_data, val_phi = val_phi, val_GG = val_GG, n_select = 10), "Var")
plot_SF_var = plot_SF(select_pregen_inc_data(df_preload_data, val_phi = val_phi, val_GG = val_GG, n_select = 10), "Var")
# all together
plots = c(plot_gini_phi, plot_gini_GG, plot_gini_var, plot_SF_phi, plot_SF_GG, plot_SF_var)
plot_grid(plot_gini_phi, plot_gini_GG, plot_gini_var, plot_SF_phi, plot_SF_GG, plot_SF_var,
ncol=3, nrow=2)
# Function for plotting the Gini
plot_gini = function(df_data, param) {
step_param = 0.25
x_min = min(df_data$ValParam)
x_max = max(df_data$ValParam)
y_min = 0 # floor(min(df_data$Total) / step_param) * step_param
y_max = 1 # min(ceiling(max(df_data$Total) / step_param) * step_param, 1)
# Plot
df_data %>% group_by(ValParam, Group) %>% mutate(Mean_Gini = mean(Total)) %>%
ggplot(aes(x=ValParam, y = Mean_Gini, color=Group)) +
#geom_line(size = 1) +
geom_smooth(size = 1, se=FALSE)#, formula = y ~ x + x^2 + x^3) +
theme_classic() +
theme(title = element_text(size = 15), plot.title = element_text(hjust = 0.5), legend.position = "none") +
scale_color_manual(values=c("black", "blue", "red")) +
scale_x_continuous(limits=c(x_min, x_max), expand = c(0,0)) + scale_y_continuous(limits=c(y_min,y_max), expand = c(0,0)) +
xlab(param) + ylab("Mean Gini") #+
#ggtitle(sprintf("Total Inequality, Varying %s", param))
}
# Function for plotting the Share Fair
plot_SF = function(df_data, param) {
step_param = 25
x_min = min(df_data$ValParam)
x_max = max(df_data$ValParam)
y_min = 0 # floor(min(df_data$ShareFair) / step_param) * step_param
y_max = 100 # min(ceiling(max(df_data$ShareFair) / step_param) * step_param, 100)
# Plot
df_data %>% group_by(ValParam, Group) %>% mutate(Mean_SF = mean(ShareFair)) %>%
ggplot(aes(x=ValParam, y = Mean_SF, color=Group)) +
#geom_line(size = 1) +
geom_smooth(size = 1, se=FALSE)#, formula = y ~ x + x^2 + x^3) +
theme_classic() +
theme(title = element_text(size = 15), plot.title = element_text(hjust = 0.5), legend.position = "none") +
scale_color_manual(values=c("black", "blue", "red")) +
scale_x_continuous(limits=c(x_min, x_max), expand = c(0,0)) + scale_y_continuous(limits=c(y_min,y_max), expand = c(0,0)) +
xlab(param) + ylab("Mean Fair Share (%)") #+
#ggtitle(sprintf("Total Inequality, Varying %s", param))
}
val_phi = 0
val_GG = 0.5
val_var = 1
# phi
plot_gini_phi = plot_gini(select_pregen_inc_data(df_preload_data, val_GG = val_GG, val_var = val_var, n_select = 10), "Phi")
val_phi = 1
val_GG = 0.5
val_var = 1
# phi
plot_gini_phi = plot_gini(select_pregen_inc_data(df_preload_data, val_GG = val_GG, val_var = val_var, n_select = 10), "Phi")
# Function for plotting the Gini
plot_gini = function(df_data, param) {
step_param = 0.25
x_min = min(df_data$ValParam)
x_max = max(df_data$ValParam)
y_min = 0 # floor(min(df_data$Total) / step_param) * step_param
y_max = 1 # min(ceiling(max(df_data$Total) / step_param) * step_param, 1)
# Plot
df_data %>% group_by(ValParam, Group) %>% mutate(Mean_Gini = mean(Total)) %>%
ggplot(aes(x=ValParam, y = Mean_Gini, color=Group)) +
#geom_line(size = 1) +
geom_smooth(size = 1, se=FALSE) + #, formula = y ~ x + x^2 + x^3) +
theme_classic() +
theme(title = element_text(size = 15), plot.title = element_text(hjust = 0.5), legend.position = "none") +
scale_color_manual(values=c("black", "blue", "red")) +
scale_x_continuous(limits=c(x_min, x_max), expand = c(0,0)) + scale_y_continuous(limits=c(y_min,y_max), expand = c(0,0)) +
xlab(param) + ylab("Mean Gini") #+
#ggtitle(sprintf("Total Inequality, Varying %s", param))
}
# Function for plotting the Share Fair
plot_SF = function(df_data, param) {
step_param = 25
x_min = min(df_data$ValParam)
x_max = max(df_data$ValParam)
y_min = 0 # floor(min(df_data$ShareFair) / step_param) * step_param
y_max = 100 # min(ceiling(max(df_data$ShareFair) / step_param) * step_param, 100)
# Plot
df_data %>% group_by(ValParam, Group) %>% mutate(Mean_SF = mean(ShareFair)) %>%
ggplot(aes(x=ValParam, y = Mean_SF, color=Group)) +
#geom_line(size = 1) +
geom_smooth(size = 1, se=FALSE) + #, formula = y ~ x + x^2 + x^3) +
theme_classic() +
theme(title = element_text(size = 15), plot.title = element_text(hjust = 0.5), legend.position = "none") +
scale_color_manual(values=c("black", "blue", "red")) +
scale_x_continuous(limits=c(x_min, x_max), expand = c(0,0)) + scale_y_continuous(limits=c(y_min,y_max), expand = c(0,0)) +
xlab(param) + ylab("Mean Fair Share (%)") #+
#ggtitle(sprintf("Total Inequality, Varying %s", param))
}
val_phi = 1
val_GG = 0.5
val_var = 1
# phi
plot_gini_phi = plot_gini(select_pregen_inc_data(df_preload_data, val_GG = val_GG, val_var = val_var, n_select = 10), "Phi")
plot_SF_phi = plot_SF(select_pregen_inc_data(df_preload_data, val_GG = val_GG, val_var = val_var, n_select = 10), "Phi")
# GG
plot_gini_GG = plot_gini(select_pregen_inc_data(df_preload_data, val_phi = val_phi, val_var = val_var, n_select = 10), "GG")
plot_SF_GG = plot_SF(select_pregen_inc_data(df_preload_data, val_phi = val_phi, val_var = val_var, n_select = 10), "GG")
# Var
plot_gini_var = plot_gini(select_pregen_inc_data(df_preload_data, val_phi = val_phi, val_GG = val_GG, n_select = 10), "Var")
plot_SF_var = plot_SF(select_pregen_inc_data(df_preload_data, val_phi = val_phi, val_GG = val_GG, n_select = 10), "Var")
# all together
plots = c(plot_gini_phi, plot_gini_GG, plot_gini_var, plot_SF_phi, plot_SF_GG, plot_SF_var)
plot_grid(plot_gini_phi, plot_gini_GG, plot_gini_var, plot_SF_phi, plot_SF_GG, plot_SF_var,
ncol=3, nrow=2)
val_phi = 0
val_GG = 0.5
val_var = 1
# phi
plot_gini_phi = plot_gini(select_pregen_inc_data(df_preload_data, val_GG = val_GG, val_var = val_var, n_select = 10), "Phi")
plot_SF_phi = plot_SF(select_pregen_inc_data(df_preload_data, val_GG = val_GG, val_var = val_var, n_select = 10), "Phi")
# GG
plot_gini_GG = plot_gini(select_pregen_inc_data(df_preload_data, val_phi = val_phi, val_var = val_var, n_select = 10), "GG")
plot_SF_GG = plot_SF(select_pregen_inc_data(df_preload_data, val_phi = val_phi, val_var = val_var, n_select = 10), "GG")
# Var
plot_gini_var = plot_gini(select_pregen_inc_data(df_preload_data, val_phi = val_phi, val_GG = val_GG, n_select = 10), "Var")
plot_SF_var = plot_SF(select_pregen_inc_data(df_preload_data, val_phi = val_phi, val_GG = val_GG, n_select = 10), "Var")
# all together
plots = c(plot_gini_phi, plot_gini_GG, plot_gini_var, plot_SF_phi, plot_SF_GG, plot_SF_var)
plot_grid(plot_gini_phi, plot_gini_GG, plot_gini_var, plot_SF_phi, plot_SF_GG, plot_SF_var,
ncol=3, nrow=2)
val_phi = 0.2
val_GG = -0.3
val_var = 1
# phi
plot_gini_phi = plot_gini(select_pregen_inc_data(df_preload_data, val_GG = val_GG, val_var = val_var, n_select = 10), "Phi")
plot_SF_phi = plot_SF(select_pregen_inc_data(df_preload_data, val_GG = val_GG, val_var = val_var, n_select = 10), "Phi")
# GG
plot_gini_GG = plot_gini(select_pregen_inc_data(df_preload_data, val_phi = val_phi, val_var = val_var, n_select = 10), "GG")
plot_SF_GG = plot_SF(select_pregen_inc_data(df_preload_data, val_phi = val_phi, val_var = val_var, n_select = 10), "GG")
# Var
plot_gini_var = plot_gini(select_pregen_inc_data(df_preload_data, val_phi = val_phi, val_GG = val_GG, n_select = 10), "Var")
plot_SF_var = plot_SF(select_pregen_inc_data(df_preload_data, val_phi = val_phi, val_GG = val_GG, n_select = 10), "Var")
# all together
plots = c(plot_gini_phi, plot_gini_GG, plot_gini_var, plot_SF_phi, plot_SF_GG, plot_SF_var)
plot_grid(plot_gini_phi, plot_gini_GG, plot_gini_var, plot_SF_phi, plot_SF_GG, plot_SF_var,
ncol=3, nrow=2)
plot_grid(plot_gini_phi, plot_gini_GG, plot_gini_var, plot_SF_phi, plot_SF_GG, plot_SF_var,
ncol=3, nrow=2, title("Gini and Fair Inequality"))
plot_grid(plot_gini_phi, plot_gini_GG, plot_gini_var, plot_SF_phi, plot_SF_GG, plot_SF_var,
ncol=3, nrow=2)
View(df_preload_data)
shiny::runApp('C:/Programming/GitHub/Wendy-RA/Working/Pages/Fair_Inequality/myapp')
shiny::runApp('C:/Programming/GitHub/io_testing/Pages/Fair_Inequality/myapp')
runApp('C:/Programming/GitHub/io_testing/Pages/Fair_Inequality/myapp')
shiny::runApp('C:/Programming/GitHub/io_testing/Pages/Fair_Inequality/myapp')
?rlnorm
test = rlnorm(100, 0, 1)
mean(test)
test = rlnorm(100, 0, 1)
mean(test)
test = rlnorm(100, 0, 1)
mean(test)
test = rlnorm(100, 0, 1)
mean(test)
test = rlnorm(100, 0, 1)
mean(test)
test = rlnorm(100, 0, 1)
mean(test)
test = rlnorm(100, 0, 1)
mean(test)
test = rlnorm(100, 0, 1)
mean(test)
test = rlnorm(100, 10, 1)
mean(test)
test = rlnorm(100, 10, 1)
mean(test)
test = rlnorm(100, 10, 1)
mean(test)
test = rlnorm(100, 10, 1)
mean(test)
test = rlnorm(100, 10, 1)
mean(test)
test = rlnorm(100, log(10), 1)
mean(test)
test = rlnorm(100, log(10), 1)
mean(test)
test = rlnorm(100, log(10), 1)
mean(test)
test = rlnorm(100, log(10), 1)
mean(test)
test = rlnorm(100, log(10), 1)
mean(test)
test = rlnorm(100, log(10), 1)
mean(test)
test = rlnorm(100, log(10), 1)
mean(test)
test = rlnorm(100, log(10), 1)
mean(test)
test = rlnorm(100, log(10), 1)
mean(test)
test = rlnorm(100, log(10), 1)
mean(test)
test = rlnorm(100, log(10), 1)
mean(test)
test = rlnorm(100, log(10), 1)
mean(test)
test = rlnorm(100, log(10), 1)
mean(test)
test = rlnorm(100, log(10), 1)
mean(test)
test = rlnorm(100, log(10), 1)
mean(test)
test = rlnorm(100, log(10),0.1)
mean(test)
hist(test)
test = rlnorm(1000, log(10),0.1)
hist(test)
test = rlnorm(1000, 10,0.1)
hist(test)
test = rlnorm(1000, 10, 1)
hist(test)
test = rlnorm(1000, log(10), 1)
hist(test)
Z = rnorm(1000, 10, 1)
hist(Z)
hist(exp(Z))
hist(X1)
X1 = rlnorm(1000, log(10), 1)
hist(X1)
Z = rnorm(1000, 10, 1)
shiny::runApp('C:/Programming/GitHub/io_testing/Pages/Fair_Inequality/myapp')
?rnorm
runApp('C:/Programming/GitHub/io_testing/Pages/Fair_Inequality/myapp')
?t
# Gini Normalisation
normalise_inc_fGini2 <- function(x) {
m <- 2 # Obtain number of siblings per family
w <- t(replicate(m,colMeans(x))) # Generate coefficients vector
y <- x/w # Demean population st each family has average income of 1
return (y) # Calculate Gini based on new, demeaned population
}
runApp('C:/Programming/GitHub/io_testing/Pages/Fair_Inequality/myapp')
n = 100
data = runif(n, min=-1, max = 1)
hist(data)
n = 10000
data = runif(n, min=-1, max = 1)
hist(data)
n = 10000
unif_min= -1
unif_max = 1
unif_mean = (unif_max - unif_min) / 2
unif_var = (unif_max - unif_min)^2 / 12
data = runif(n, min=-unif_max, max = unif_max)
data_norm = (data - unif_mean) / (sqrt(unif_var) / n)
hist(data_norm)
n = 10000
unif_min= -1
unif_max = 1
unif_mean = (unif_max - unif_min) / 2
unif_var = (unif_max - unif_min)^2 / 12
data = runif(n, min=unif_max, max = unif_max)
data_norm = (data - unif_mean) / (sqrt(unif_var) / n)
hist(data_norm)
shiny::runApp('C:/Programming/GitHub/io_testing/Pages/Fair_Inequality/myapp')
runApp('C:/Programming/GitHub/io_testing/Pages/Fair_Inequality/myapp')
# UI
ui <- tagList(
# App title ----
titlePanel("Analysing Fair Inequality"),
withMathJax(),
navbarPage(
"Page",
tabPanel("Total Effect",
# Sidebar layout with input and output definitions ----
sidebarLayout(
#=========================================================================#
# INPUT
#=========================================================================#
sidebarPanel(
# SIBLINGS
conditionalPanel(condition = "'1' == '1'",#"input.distribution == 'Siblings'",
numericInput(inputId="sib_n_in_group", label = h4("Number in each group"), value = 500),
sliderInput("sib_phi_men", HTML("Unfair Inequality: <br/>Family Advantage, φ"), min = 0,
max = 1, value = 0.6, step=0.05),
# sliderInput("sib_phi_women", HTML("Unfair Inequality: <br/>Family Advantage, 1-φ, women"), min = 0,
#             max = 1, value = 0.6, step=0.05),
sliderInput("sib_mean_income_diff_slider", HTML("Unfair Inequality: Gender Gap (%)"), min = -100,
max = 100, value = -25, step=5),
sliderInput("sib_var_income_slider", HTML("Variance"), min = 0,
max = 10, value = 1, step=0.25),
# sliderInput("sib_var_income_diff_slider", HTML("Within-gender Inequality <br/>% Difference in income variance"), min = -100,
#             max = 100, value = -25, step=25)
)
, width = 4),
#=========================================================================#
# OUTPUT
#=========================================================================#
mainPanel(
#plotOutput(outputId = "distPlot"),
#fluidRow(column(width=6, plotOutput(outputId = "GiniPlot")), column(width=3, tableOutput(outputId = "GiniTable")))
h6('This page displays Lorenz curves, Gini coefficients, and the share of total inequality considered "fair" for each subgroup of the population generated on the basis of the chosen parameters.'),
h3("Lorenz Curves"),
plotOutput(outputId = "GiniPlot", width="455px", height="500px"),
h3("Gini Coefficient"),
tableOutput(outputId = "GiniTable"),
h3("Data Generation"),
helpText('For each gender \\( g \\in \\{M,F\\} \\), and each sibling pair \\( i=1, \\dots, N \\), take two normally distributed variables, \\( X_{gi}^{(1)}, X_{gi}^{(2)} \\), with mean \\( \\mu_{g} \\) and variance \\( \\sigma_{g}^{2} \\). For gender \\(g\\), the family advantage is \\(1-\\varphi_{g}.\\)'),
helpText("Let \\( y_{gi}^{(1)}, y_{gi}^{(2)} \\) denote the log incomes of siblings 1 and 2 of a given pair \\( i \\) and a given gender \\( g \\)."),
helpText('Then \\( y_{gi}^{(1)} = \\exp(X_{gi}^{(1)}) \\) and \\( y_{gi}^{(2)} = \\varphi_{g} \\times \\exp(X_{gi}^{(1)}) + (1 - \\varphi_{g}) \\times \\exp(X_{gi}^{(2)}) \\).
'),
h3("Gini Calculation"),
helpText('For each group \\( k \\in \\{p,f\\} \\) the Gini coefficient is: \\( G^{k}= \\displaystyle\\frac{\\Delta^{k}}{N^{k}} \\frac{1}{\\underline{y}} \\frac{1}{2} \\).'),
helpText('Where \\( \\Delta^{k} = \\sum_{i=j+1}^{n} \\sum_{j=1}^{n-1} |y_{i}-y_{j}| s_{ij}^{k} \\), such that \\( s_{ij}^{k}=1 \\) iff \\( i \\) and \\( j \\) are in the same group \\( k \\), and 0 otherwise. Also, \\( N^{p} = \\frac{n(n-1)}{2}, N^{f} = \\frac{n}{2} \\).'),
helpText('The share of fair inequality is defined as \\( \\cfrac{G^{f}}{G^{p}} \\).'),
, width=8)
)
),
tabPanel("Individual Effects",
# Sidebar layout with input and output definitions ----
sidebarLayout(
#=========================================================================#
# INPUT
#=========================================================================#
sidebarPanel(
# SIBLINGS
conditionalPanel(condition = "'1' == '1'",#"input.distribution == 'Siblings'",
sliderInput("params_phi", HTML("Unfair Inequality: <br/>Family Advantage, 1-φ"), min = 0,
max = 1, value = 0.6, step=0.05),
sliderInput("params_GG", HTML("Unfair Inequality: Gender Gap (%)"), min = -1,
max = 1, value = -0.2, step=0.05),
sliderInput("params_var_inc", HTML("Variance"), min = 0,
max = 2, value = 1, step=0.05),
)
, width = 4),
#=========================================================================#
# OUTPUT
#=========================================================================#
mainPanel(
h6('This page isolates the effect of individual parameters on the Gini coefficient and the share of "fair" inequality within each subgroup.
Each of the graph below shows the effect of varying one parameter, while holding the other 2 constant at the currently chosen values. '),
h6('Example: In the default case, the first column displays the Gini and Share of fair inequality for different values of \\( \\phi \\), given \\( GG = -0.2, \\sigma^{2} = 1 \\). The second column displays the two amounts for different gender gap values, given \\( 1-\\varphi = 0.6, \\sigma^{2} = 1 \\), etc.
'),
h3("Parameter Plots"),
plotOutput("param_plot", width="600px", height="400px")
, width=8)
)
)
)
)
runApp()
runApp('C:/Programming/GitHub/io_testing/Pages/Fair_Inequality/myapp')
?replicate
?colMeans
replicate(2, c(1,2))
t(replicate(2, c(1,2)))
runApp('C:/Programming/GitHub/io_testing/Pages/Fair_Inequality/myapp')
runApp('C:/Programming/GitHub/io_testing/Pages/Fair_Inequality/myapp')
runApp('C:/Programming/GitHub/io_testing/Pages/Fair_Inequality/myapp')
?sample
runApp('C:/Programming/GitHub/io_testing/Pages/Fair_Inequality/myapp')
runApp('C:/Programming/GitHub/io_testing/Pages/Fair_Inequality/myapp')
create_app = function() {
setwd("C:/Programming/GitHub/io_testing/Pages/Fair_Inequality")
shinylive::export(appdir = "myapp", destdir = "docs")
}
create_app()
