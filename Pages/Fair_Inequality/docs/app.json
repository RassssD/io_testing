[{"name":"app.R","content":"library(shiny)\nlibrary(comprehenr)\n\n# Define UI for app that draws a histogram ----\nui <- fluidPage(\n  \n  # App title ----\n  titlePanel(\"Hello Shiny!\"),\n  \n  # Sidebar layout with input and output definitions ----\n  sidebarLayout(\n    \n    # Sidebar panel for inputs ----\n    sidebarPanel(\n      \n      # Input: Slider for the number of bins ----\n      sliderInput(inputId = \"Delta\",\n                  label = \"Delta:\",\n                  min = 0,\n                  max = 5,\n                  value = 0.5,\n                  step=0.25),\n      sliderInput(inputId = \"n_in_group\",\n                  label = \"Number in each group\",\n                  min = 1,\n                  max = 10,\n                  value = 5,\n                  step = 2),\n      sliderInput(inputId = \"mu_man\",\n                  label = \"Average Man Income\",\n                  min = 1,\n                  max = 10,\n                  value = 5,\n                  step = 1),\n      sliderInput(inputId = \"mu_woman\",\n                  label = \"Average Woman Income\",\n                  min = 1,\n                  max = 10,\n                  value = 2,\n                  step = 1),\n      \n    ),\n    \n    # Main panel for displaying outputs ----\n    mainPanel(\n      \n      # Output: Histogram ----\n      plotOutput(outputId = \"distPlot\")\n      \n    )\n  )\n)\n\n\n# Define server logic required to draw a histogram ----\nserver <- function(input, output) {\n  \n  # Histogram of the Old Faithful Geyser Data ----\n  # with requested number of bins\n  # This expression that generates a histogram is wrapped in a call\n  # to renderPlot to indicate that:\n  #\n  # 1. It is \"reactive\" and therefore should be automatically\n  #    re-executed when inputs (input$bins) change\n  # 2. Its output type is a plot\n  output$distPlot <- renderPlot({\n    \n    ##########\n    n_indivs = input$n_in_group\n    \n    base_income_woman = 1\n    base_income_man = 2*base_income_woman\n    \n    income_step = input$Delta\n    n_indivs_step = floor(n_indivs/2)\n    print(n_indivs_step)\n    \n    incomes_woman = to_vec(for(i in -n_indivs_step:n_indivs_step) max(base_income_woman + income_step * i, 0))\n    incomes_man = to_vec(for(i in -n_indivs_step:n_indivs_step) max(base_income_man + 2*income_step * i, 0))\n    \n    incomes_woman = rnorm(n_indivs, input$mu_woman, 1)\n    incomes_man = rnorm(n_indivs, input$mu_man, 1)\n    \n    group_woman <- to_vec(for(i in 1:n_indivs) \"Woman\")\n    group_man <- to_vec(for(i in 1:n_indivs) \"Man\")\n    \n\n    \n    df = data.frame(c(incomes_man, incomes_woman), c(group_man, group_woman))\n    colnames(df) <- c(\"Income\", \"Group\")\n    \n    \n    ####\n    \n    p1 <- hist(incomes_woman)\n    p2 <- hist(incomes_man)\n    \n    plot(p1, xlim=c(0,10), col=rgb(1,0,0,1/4))\n    plot(p2, xlim=c(0,10), col=rgb(0,0,1,1/4), add=T)\n\n    \n  })\n  \n  \n}\n\n\nshinyApp(ui = ui, server = server)\n\n\n","type":"text"}]
