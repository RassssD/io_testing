[{"name":"app.R","content":"library(shiny)\r\nlibrary(comprehenr)\r\nlibrary(tidyverse)\r\nlibrary(EnvStats)\r\nlibrary(ggplot2)\r\n\r\n\r\n# Define UI for app that draws a histogram ----\r\nui <- fluidPage(\r\n  \r\n  # App title ----\r\n  titlePanel(\"Analysing Fair Inequality\"),\r\n  \r\n  # Sidebar layout with input and output definitions ----\r\n  sidebarLayout(\r\n    \r\n    # Sidebar panel for inputs ----\r\n    sidebarPanel(\r\n      \r\n      # Select of income type\r\n      #selectInput(inputId = \"distribution\", label = h3(\"Income Distribution\"), \r\n                  #choices = list(\"Fixed\", \"Random Normal\", \"Pareto\", \"Random Log Normal\", \"Siblings\"), \r\n                  #selected = \"Siblings\"),\r\n      \r\n      \r\n      #=========================================================================#\r\n      # FIXED\r\n      #=========================================================================#\r\n      \r\n      conditionalPanel(condition = \"input.distribution == 'Fixed'\",\r\n        # Incomes\r\n        p(\"Income distribution based on a median/mean income, a number of individuals in each group, and the difference in income between two consecutive individuals.\"),\r\n        numericInput(inputId=\"fixed_n_in_group\", label = h3(\"Number in each group\"), value = 5),\r\n\r\n        sliderInput(\"fixed_mean_income_slider\", label = h3(\"Mean Income\"), min = 0, \r\n                    max = 5, value = c(1, 2), step=0.25),\r\n        sliderInput(inputId = \"income_step_slider\", label = h3(\"Income Step\"), min = 0, \r\n                    max = 5, value = c(0.25, 0.5), step=0.25)\r\n\r\n      ),\r\n      \r\n      #=========================================================================#\r\n      # RANDOM NORMAL\r\n      #=========================================================================#\r\n      conditionalPanel(condition = \"input.distribution == 'Random Normal'\",\r\n        numericInput(inputId=\"rn_n_in_group\", label = h3(\"Number in each group\"), value = 500),\r\n        \r\n        sliderInput(\"rn_mean_income_slider\", label = h3(\"Mean Income\"), min = 0, \r\n                    max = 100, value = c(25, 40), step=5),\r\n\r\n        fluidRow(\r\n          column(width = 6,\r\n                 numericInput(\"rn_var_men\", label=h5(\"Variance - Men\"), value=10)\r\n          ),\r\n          column(width = 6, \r\n                 numericInput(\"rn_var_women\", label=h5(\"Variance - Women\"), value=5)\r\n          )\r\n        )\r\n      ),\r\n      \r\n      \r\n      #=========================================================================#\r\n      # PARETO\r\n      #=========================================================================#\r\n      \r\n      conditionalPanel(condition = \"input.distribution == 'Pareto'\",\r\n       numericInput(inputId=\"pareto_n_in_group\", label = h3(\"Number in each group\"), value = 50),\r\n       \r\n       sliderInput(\"pareto_min_slider\", label = h3(\"Mean Income\"), min = 0, \r\n                   max = 100, value = c(25, 40), step=5),\r\n       \r\n       fluidRow(\r\n         column(width = 6,\r\n                numericInput(\"pareto_scale_men\", label=h5(\"Scale - Men\"), value=100)\r\n         ),\r\n         column(width = 6, \r\n                numericInput(\"pareto_scale_women\", label=h5(\"Scale - Women\"), value=50)\r\n         )\r\n       )\r\n      ),\r\n      \r\n\r\n      #=========================================================================#\r\n      # LOG NORMAL\r\n      #=========================================================================#\r\n\r\n      \r\n      conditionalPanel(condition = \"input.distribution == 'Random Log Normal'\",\r\n       numericInput(inputId=\"rln_n_in_group\", label = h3(\"Number in each group\"), value = 50),\r\n       \r\n       sliderInput(\"rln_mean_income_slider\", label = h3(\"Mean Income\"), min = 0, \r\n                   max = 100, value = c(20, 50), step=1),\r\n       \r\n       fluidRow(\r\n         column(width = 6,\r\n                numericInput(\"rln_var_men\", label=h5(\"Variance - Men\"), value=0.5)\r\n         ),\r\n         column(width = 6, \r\n                numericInput(\"rln_var_women\", label=h5(\"Variance - Women\"), value=1)\r\n         )\r\n       )\r\n       #checkboxInput(\"checkbox\", label = \"Log Scale\", value = FALSE),\r\n      ), \r\n      \r\n      #=========================================================================#\r\n      # SIBLINGS\r\n      #=========================================================================#\r\n      \r\n      conditionalPanel(condition = \"'1' == '1'\",#\"input.distribution == 'Siblings'\",\r\n       numericInput(inputId=\"sib_n_in_group\", label = h4(\"Number in each group\"), value = 500),\r\n       \r\n       sliderInput(\"sib_phi\", HTML(\"Unfair Inequality: <br/>Family Advantage, 1-Ï†\"), min = 0, \r\n                   max = 1, value = 0.6, step=0.05),\r\n       \r\n       sliderInput(\"sib_mean_income_diff_slider\", HTML(\"Unfair Inequality: Gender Gap (%)\"), min = 0, \r\n                   max = 100, value = 25, step=5),\r\n       #sliderInput(\"sib_var_income_diff_slider\", HTML(\"Within-gender Inequality <br/>% Difference in income variance\"), min = -100, max = 100, value = -30, step=5),\r\n       fluidRow(\r\n         column(width = 6,\r\n                numericInput(\"sib_rln_var_men_test\", label=h5(\"Variance - Men\"), value=1)\r\n         ),\r\n         column(width = 6, \r\n                numericInput(\"sib_rln_var_women_test\", label=h5(\"Variance - Women\"), value=1)\r\n         )\r\n       )\r\n       \r\n      )\r\n      \r\n    , width = 4),\r\n    \r\n    # Main panel for displaying outputs ----\r\n    mainPanel(\r\n      \r\n      #plotOutput(outputId = \"distPlot\"),\r\n      #fluidRow(column(width=6, plotOutput(outputId = \"GiniPlot\")), column(width=3, tableOutput(outputId = \"GiniTable\")))\r\n      plotOutput(outputId = \"GiniPlot\", width=\"455px\", height=\"500px\"),\r\n      tags$h3(\"Gini Coefficient\"),\r\n      tableOutput(outputId = \"GiniTable\")\r\n      \r\n\r\n      \r\n    , width=8)\r\n  )\r\n)\r\n\r\n\r\n# Define server logic required to draw a histogram ----\r\nserver <- function(input, output) {\r\n  \r\n\r\n  incomes_df <- reactive({\r\n\r\n    # For now, fix to siblings\r\n    distribution = input$distribution\r\n    distribution = \"Siblings\"\r\n    \r\n    #=========================================================================#\r\n    # FIXED\r\n    #=========================================================================#\r\n    \r\n    if (distribution == \"Fixed\") {\r\n      \r\n      n_indivs = input$fixed_n_in_group\r\n      \r\n      base_income_woman <- input$fixed_mean_income_slider[1]\r\n      base_income_man <- input$fixed_mean_income_slider[2]\r\n      \r\n      income_step_woman <- input$income_step_slider[1]\r\n      income_step_man <- input$income_step_slider[2]\r\n      n_indivs_step <- floor(n_indivs/2)\r\n      \r\n      incomes_woman <- to_vec(for(i in -n_indivs_step:n_indivs_step) max(base_income_woman + income_step_woman * i, 0))\r\n      incomes_man <- to_vec(for(i in -n_indivs_step:n_indivs_step) max(base_income_man + income_step_man * i, 0))\r\n      \r\n      group_woman <- to_vec(for(i in 1:n_indivs) \"Woman\")\r\n      group_man <- to_vec(for(i in 1:n_indivs) \"Man\")\r\n      \r\n      # Logic for handling even numbers - remove the base number\r\n      if (floor(n_indivs/2) == n_indivs/2) {\r\n        incomes_woman <- incomes_woman[-(n_indivs/2+1)]\r\n        incomes_man <- incomes_man[-(n_indivs/2+1)]\r\n  \r\n      }\r\n    }\r\n    \r\n    #=========================================================================#\r\n    # RANDOM NORMAL\r\n    #=========================================================================#\r\n    \r\n    if (distribution == \"Random Normal\") {\r\n      \r\n      n_indivs = input$rn_n_in_group\r\n      \r\n      \r\n      incomes_man <- pmax(rnorm(n_indivs, input$rn_mean_income_slider[2], input$rn_var_men), 0)\r\n      incomes_woman <- pmax(rnorm(n_indivs, input$rn_mean_income_slider[1], input$rn_var_women), 0)\r\n      \r\n      group_woman <- to_vec(for(i in 1:n_indivs) \"Woman\")\r\n      group_man <- to_vec(for(i in 1:n_indivs) \"Man\")\r\n      \r\n    }\r\n    \r\n    #=========================================================================#\r\n    # RANDOM LOG NORMAL\r\n    #=========================================================================#\r\n    \r\n    if (distribution == \"Random Log Normal\") {\r\n      \r\n      n_indivs = input$rln_n_in_group\r\n      \r\n      \r\n      incomes_man <- pmax(rlnorm(n_indivs, log(input$rln_mean_income_slider[2]), input$rln_var_men), 0)\r\n      incomes_woman <- pmax(rlnorm(n_indivs, log(input$rln_mean_income_slider[1]), input$rln_var_women), 0)\r\n      \r\n      group_woman <- to_vec(for(i in 1:n_indivs) \"Woman\")\r\n      group_man <- to_vec(for(i in 1:n_indivs) \"Man\")\r\n      \r\n    }\r\n    \r\n    #=========================================================================#\r\n    # PARETO\r\n    #=========================================================================#\r\n    \r\n    if (distribution == \"Pareto\") {\r\n      \r\n      n_indivs = input$pareto_n_in_group\r\n      \r\n      incomes_man <- pmax(rpareto(n_indivs, input$pareto_min_slider[2], input$pareto_scale_men), 0)\r\n      incomes_woman <- pmax(rpareto(n_indivs, input$pareto_min_slider[1], input$pareto_scale_women), 0)\r\n      \r\n      group_woman <- to_vec(for(i in 1:n_indivs) \"Woman\")\r\n      group_man <- to_vec(for(i in 1:n_indivs) \"Man\")\r\n      \r\n    }\r\n    \r\n    \r\n    #=========================================================================#\r\n    # SIBLINGS WITH RLN\r\n    #=========================================================================#\r\n    \r\n    if (distribution == \"Siblings\") {\r\n      \r\n      n_indivs = input$sib_n_in_group\r\n      sib_phi = 1 - input$sib_phi\r\n      \r\n      # Obtain parameters\r\n      sib_RLN_mean_men = 10\r\n      sib_RLN_mean_women = sib_RLN_mean_men - input$sib_mean_income_diff_slider * sib_RLN_mean_men / 100\r\n\r\n      sib_RLN_var_men = input$sib_rln_var_men_test\r\n      sib_RLN_var_women = input$sib_rln_var_women_test #sib_RLN_var_men + input$sib_var_income_diff_slider * sib_RLN_var_men / 100\r\n      \r\n      # Generate original incomes\r\n      incomes_man <- pmax(rlnorm(n_indivs, log(sib_RLN_mean_men), sib_RLN_var_men), 0)\r\n      incomes_woman <- pmax(rlnorm(n_indivs, log(sib_RLN_mean_women), sib_RLN_var_women), 0)\r\n      \r\n      group_woman <- to_vec(for(i in 1:n_indivs) \"Woman\")\r\n      group_man <- to_vec(for(i in 1:n_indivs) \"Man\")\r\n      \r\n\r\n      # Generate random element of the SSS income\r\n      incomes_man_sss_random <- pmax(rlnorm(n_indivs, log(sib_RLN_mean_men), sib_RLN_var_men), 0)\r\n      incomes_woman_sss_random <- pmax(rlnorm(n_indivs, log(sib_RLN_mean_women), sib_RLN_var_women), 0)\r\n      \r\n      # Combine the two to get the SSS income\r\n      incomes_man_sss = sib_phi * incomes_man_sss_random + (1-sib_phi) * incomes_man\r\n      incomes_woman_sss = sib_phi * incomes_woman_sss_random + (1-sib_phi) * incomes_woman\r\n      \r\n      \r\n    }\r\n    \r\n    # If siblings, need to have some extra columns to make it work\r\n    if (distribution == \"Siblings\") {\r\n      df <- data.frame(c(incomes_man, incomes_woman), c(incomes_man_sss, incomes_woman_sss), c(group_man, group_woman))\r\n      colnames(df) <- c(\"Income\", \"Income_SSS\", \"Group\")\r\n    }\r\n    \r\n    # Otherwise don't bother\r\n    else {\r\n      df <- data.frame(c(incomes_man, incomes_woman), c(group_man, group_woman))\r\n      colnames(df) <- c(\"Income\", \"Group\")\r\n    }\r\n    \r\n\r\n\r\n    return(df)\r\n  })\r\n  \r\n  \r\n  #=========================================================================#\r\n  # OUTPUT PLOTS\r\n  #=========================================================================#\r\n  \r\n  \r\n  # Distribution Plot\r\n  output$distPlot <- renderPlot({\r\n    \r\n    ##########\r\n    df <- incomes_df()\r\n    \r\n    # For now, fix to siblings\r\n    distribution = input$distribution\r\n    distribution = \"Siblings\"\r\n    \r\n    if (distribution == \"Siblings\") {\r\n      df <- df %>%\r\n        pivot_longer(cols = starts_with(\"Income\"),\r\n                     names_to = \"Sibling\",\r\n                     values_to = \"Income\")\r\n    }\r\n\r\n    \r\n    hist_max_x <- ceiling(max(df$Income)/5)*5\r\n\r\n    # Different bins depending on number of indivs\r\n    # If fixed intervals, okay to just have individual levels / capped at 0.25\r\n    if (distribution == \"Fixed\") {\r\n      bins <- seq(from=0, to=hist_max_x, by=min(max(input$Delta, 0.25),1))\r\n    }\r\n    \r\n    # RLN is annoying and weird, keep it separate for now\r\n    else if (distribution == \"Random Log Normal\" | input$distribution == \"Siblings\") {\r\n      \r\n      # FOR NOW, JUST DON'T BOTHER WITH THIS\r\n      \r\n      max_income_men = ceiling(max(subset(df, Group == \"Man\")$Income)/5)*5\r\n      max_income_women = ceiling(max(subset(df, Group == \"Woman\")$Income)/5)*5\r\n      \r\n#      hist_max_x = min(max_income_men, max_income_women)\r\n      \r\n      rln_hist_break = 10^(floor(log10(min(max_income_men, max_income_women))))\r\n      bins <- seq(from=0, to=hist_max_x+5*rln_hist_break, by=rln_hist_break)\r\n      \r\n      \r\n\r\n    }\r\n    \r\n    # For RN, makes more sense to group more\r\n    else {\r\n      bins <- seq(from=0, to=hist_max_x, by=1)\r\n\r\n    }\r\n    \r\n    \r\n    \r\n    freq = hist(df$Income, breaks=bins, include.lowest=TRUE, plot=FALSE)\r\n    hist_max_y <- ceiling(max(freq$counts))\r\n\r\n    \r\n    if (distribution == \"Random Log Normal\") {\r\n      p1 <- hist(subset(df, Group == \"Woman\")$Income, breaks = 20)#, breaks=bins)\r\n      p2 <- hist(subset(df, Group == \"Man\")$Income, breaks=20)#, breaks=bins)\r\n      \r\n      plot(p1, ylim=c(0,hist_max_y), col=rgb(1,0,0,1/4), xlab=\"Income\", ylab=\"Count\", xaxs=\"i\", yaxs=\"i\", main=\"Income Distribution\")\r\n      plot(p2, ylim=c(0,hist_max_y), col=rgb(0,0,1,1/4), add=T, xlab=\"Income\", ylab=\"Count\", xaxs=\"i\", yaxs=\"i\")\r\n      legend(x = \"topright\",         # Position\r\n             legend = c(\"Women\", \"Men\"), # Legend texts\r\n             fill = c(2, 4))\r\n    }\r\n\r\n\r\n    else {\r\n      p1 <- hist(subset(df, Group == \"Woman\")$Income, breaks=bins)\r\n      p2 <- hist(subset(df, Group == \"Man\")$Income, breaks=bins)\r\n      \r\n      plot(p1, xlim=c(0,hist_max_x), ylim=c(0,hist_max_y), col=rgb(1,0,0,1/4), xlab=\"Income\", ylab=\"Count\", xaxs=\"i\", yaxs=\"i\", main=\"Income Distribution\")\r\n      plot(p2, xlim=c(0,hist_max_x), ylim=c(0,hist_max_y), col=rgb(0,0,1,1/4), add=T, xlab=\"Income\", ylab=\"Count\", xaxs=\"i\", yaxs=\"i\")\r\n      legend(x = \"topright\",         # Position\r\n             legend = c(\"Women\", \"Men\"), # Legend texts\r\n             fill = c(2, 4))\r\n      \r\n    }\r\n\r\n    \r\n    \r\n  })\r\n  \r\n  \r\n  # Lorenz Curves\r\n  output$GiniPlot <- renderPlot({\r\n    \r\n    ##########\r\n    df <- incomes_df()\r\n    \r\n    n_indivs <- nrow(df)/ 2\r\n\r\n    #n_indivs <- ifelse(input$distribution == \"Fixed\", input$fixed_n_in_group, input$rn_n_in_group)\r\n\r\n    df <- df[order(df$Group, df$Income),]\r\n\r\n    df <- df %>% group_by(Group) %>% mutate(Cum_Income_Share = cumsum(Income) / sum(Income)) %>% ungroup()\r\n    \r\n\r\n    df_draw_men <- df %>% filter(Group == \"Man\")\r\n    cum_inc_share_men <- c(0) %>% append(df_draw_men$Cum_Income_Share)\r\n    \r\n    df_draw_women <- df %>% filter(Group == \"Woman\")\r\n    cum_inc_share_women <- c(0) %>% append(df_draw_women$Cum_Income_Share)\r\n    \r\n    df <- df[order(df$Income),]\r\n    df <- df %>% mutate(Cum_Income_Share_All = cumsum(Income) / sum(Income))\r\n    cum_inc_share_all <- c(0) %>% append(df$Cum_Income_Share_All)\r\n    \r\n    steps = seq(0, 1, by=1/n_indivs)\r\n    steps_all = seq(0, 1, by=0.5/n_indivs)\r\n\r\n\r\n    plot(x=steps, y=steps, \r\n         type=\"l\", col=1, lty=2, lwd=2,\r\n         xlab=\"Cumulative Population\", ylab=\"Cumulative Income\", main=\"Lorenz Curves\",\r\n         xlim = c(0,1), ylim = c(0,1), xaxs=\"i\", yaxs=\"i\",\r\n         asp=1)\r\n\r\n    lines(x=steps, y=cum_inc_share_women, col=2, type=\"l\", lwd=2)\r\n    lines(x=steps, y=cum_inc_share_men, col=4, type=\"l\", lwd=2)\r\n    lines(x=steps_all, y=cum_inc_share_all, col=1, type=\"l\", lwd=2)\r\n    legend(x = \"topleft\",         # Position\r\n           legend = c(\"Equality\", \"Women\", \"Men\", \"All\"), # Legend texts\r\n           lty = c(2, 1, 1, 1),\r\n           col = c(1, 2, 4, 1),\r\n           lwd = 2)\r\n\r\n    \r\n  })\r\n  \r\n  # Table\r\n  output$GiniTable <- renderTable({\r\n    \r\n    # Calculates gini for the entire population\r\n    calc_total_gini <- function(dataframe){\r\n      # Get incomes\r\n      incomes = dataframe$Income\r\n      n = length(incomes)\r\n      \r\n      # Need to divide and multiply to divide by the right amount and get the correct mean\r\n      mad = sum(as.numeric(dist(incomes))) / (0.5 * n^2)\r\n      rmad = mad / mean(incomes)\r\n      gini = 0.5 * rmad * n/(n-1)\r\n      \r\n      # Get all possible pairs\r\n      return(gini)\r\n    }\r\n    \r\n    # Calculates Gini within a given group\r\n    calc_group_gini <- function(dataframe){\r\n      df_gini <- data.frame(matrix(ncol = 2, nrow = 0))\r\n      colnames(df_gini) <- c(\"Group\", \"Gini\")\r\n      \r\n      # Calculate total Gini and add\r\n      total_gini <- calc_total_gini(dataframe)\r\n      df_gini[nrow(df_gini) + 1,] = list(Group = \"All\", Gini = total_gini)\r\n      \r\n      # Iterate over groups\r\n      for(group in unique(dataframe$Group)){\r\n        # Calculate group Gini\r\n        df_group <- df %>% filter(Group == group)\r\n        group_gini <- calc_total_gini(df_group)\r\n        # Add to group\r\n        df_gini[nrow(df_gini) + 1,] = list(Group = group, Gini = group_gini)\r\n      }\r\n      \r\n      \r\n      return(df_gini)\r\n    }\r\n    \r\n    # Sibling Gini within a population\r\n    calc_sib_gini <- function(dataframe) {\r\n      \r\n      ## Calculate Gini for entire population\r\n      # Reshape such that there is only one income column\r\n      dataframe_long <- dataframe %>%\r\n        pivot_longer(cols = starts_with(\"Income\"),\r\n                     names_to = \"Sibling\",\r\n                     values_to = \"Income\")\r\n      #print(dataframe_long)\r\n      # Within sibling\r\n      n = length(dataframe_long$Income)\r\n      n_pairs = length(dataframe$Income)\r\n      #print(n)\r\n      #print(n_pairs)\r\n      \r\n      mad = sum(abs(dataframe$Income - dataframe$Income_SSS)) / (n_pairs)\r\n      rmad = mad / mean(dataframe_long$Income)\r\n      gini = 0.5 * rmad * n/(n-1)\r\n      \r\n      return(gini)\r\n      \r\n    }\r\n    \r\n    # Sibling Gini for each group\r\n    calc_sib_groub_gini <- function(dataframe) {\r\n      \r\n      # Setup table\r\n      df_gini <- data.frame(matrix(ncol = 3, nrow = 0))\r\n      colnames(df_gini) <- c(\"Group\", \"Within_SSS\", \"Total\")\r\n      \r\n      # Need long version of data\r\n      dataframe_long <- dataframe %>%\r\n        pivot_longer(cols = starts_with(\"Income\"),\r\n                     names_to = \"Sibling\",\r\n                     values_to = \"Income\")\r\n      \r\n      # Aggregates are easy\r\n      all_within_SSS_gini <- calc_sib_gini(dataframe)\r\n      all_total_gini <- calc_total_gini(dataframe_long)\r\n      \r\n      # Fill in the All category\r\n      df_gini[nrow(df_gini) + 1,] = list(Group = \"All\", Within_SSS = all_within_SSS_gini, Total = all_total_gini)\r\n      \r\n      # Iterate over groups\r\n      for(group in unique(dataframe$Group)){\r\n        # Calculate group Gini and sibling gini\r\n        df_group <- df %>% filter(Group == group)\r\n        df_long_group <- dataframe_long %>% filter(Group == group)\r\n        \r\n        group_gini <- calc_total_gini(df_long_group)\r\n        group_sib_gini <- calc_sib_gini(df_group)\r\n        \r\n        \r\n        # Add to group\r\n        df_gini[nrow(df_gini) + 1,] = list(Group = group, Within_SSS = group_sib_gini, Total = group_gini)\r\n      }\r\n      \r\n      return(df_gini)\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    df <- incomes_df()\r\n    \r\n    # For now, fix to siblings\r\n    distribution <- input$distribution\r\n    distribution <- \"Siblings\"\r\n    \r\n    if (distribution == \"Siblings\") {\r\n      Gini_Table <- calc_sib_groub_gini(df)\r\n      Gini_Table <- mutate(Gini_Table, \"Total Inequality\" = Total, \"% Fair\" = 100 * Within_SSS / Total) %>% select(-c(Total, Within_SSS))\r\n      #print(df)\r\n    }\r\n    \r\n    else {\r\n      Gini_Table <- calc_group_gini(df)\r\n    }\r\n    \r\n    \r\n    return(Gini_Table)\r\n    \r\n    \r\n  }\r\n)\r\n  \r\n}\r\n\r\n\r\nshinyApp(ui = ui, server = server)\r\n\r\n\r\n","type":"text"},{"name":"test_app.R","content":"\r\nlibrary(shiny)\r\nlibrary(comprehenr)\r\nlibrary(tidyverse)\r\nlibrary(EnvStats)\r\nlibrary(ggplot2)\r\n\r\n\r\n\r\nsib_n_in_group = 10\r\nsib_phi = 0.6\r\n\r\nsib_mean_income_slider = c(50, 50)\r\nsib_var_men = 0.9\r\nsib_var_women = 0.5\r\n\r\n#=========================================================================#\r\n# DATA\r\n#=========================================================================#\r\n\r\n\r\nn_indivs = sib_n_in_group\r\nsib_phi = sib_phi\r\n\r\n# Generate original incomes\r\nincomes_man <- pmax(rlnorm(n_indivs, log(sib_mean_income_slider[2]), sib_var_men), 0)\r\nincomes_woman <- pmax(rlnorm(n_indivs, log(sib_mean_income_slider[1]), sib_var_women), 0)\r\n\r\ngroup_woman <- to_vec(for(i in 1:n_indivs) \"Woman\")\r\ngroup_man <- to_vec(for(i in 1:n_indivs) \"Man\")\r\n\r\n\r\n# Generate random element of the SSS income\r\nincomes_man_sss_random <- pmax(rlnorm(n_indivs, log(sib_mean_income_slider[2]), sib_var_men), 0)\r\nincomes_woman_sss_random <- pmax(rlnorm(n_indivs, log(sib_mean_income_slider[1]), sib_var_women), 0)\r\n\r\n# Combine the two to get the SSS income\r\nincomes_man_sss = sib_phi * incomes_man_sss_random + (1-sib_phi) * incomes_man\r\nincomes_woman_sss = sib_phi * incomes_woman_sss_random + (1-sib_phi) * incomes_woman\r\n  \r\n\r\n\r\n\r\n# If siblings, need to have some extra columns to make it work\r\ndf <- data.frame(c(incomes_man, incomes_woman), c(incomes_man_sss, incomes_woman_sss), c(group_man, group_woman))\r\ncolnames(df) <- c(\"Income\", \"Income_SSS\", \"Group\")\r\n\r\n\r\ndf\r\n\r\n#=========================================================================#\r\n# FUNCTIONS\r\n#=========================================================================#\r\n\r\ncalc_total_gini <- function(dataframe){\r\n  # Get incomes\r\n  incomes = dataframe$Income\r\n  n = length(incomes)\r\n  \r\n  # Need to divide and multiply to divide by the right amount and get the correct mean\r\n  mad = sum(as.numeric(dist(incomes))) / (0.5 * n^2)\r\n  rmad = mad / mean(incomes)\r\n  gini = 0.5 * rmad * n/(n-1)\r\n  \r\n  # Get all possible pairs\r\n  return(gini)\r\n}\r\n\r\n# Calculates Gini within a given group\r\ncalc_group_gini <- function(dataframe){\r\n  df_gini <- data.frame(matrix(ncol = 2, nrow = 0))\r\n  colnames(df_gini) <- c(\"Group\", \"Gini\")\r\n  \r\n  # Calculate total Gini and add\r\n  total_gini <- calc_total_gini(dataframe)\r\n  df_gini[nrow(df_gini) + 1,] = list(Group = \"All\", Gini = total_gini)\r\n  \r\n  # Iterate over groups\r\n  for(group in unique(dataframe$Group)){\r\n    # Calculate group Gini\r\n    df_group <- df %>% filter(Group == group)\r\n    group_gini <- calc_total_gini(df_group)\r\n    # Add to group\r\n    df_gini[nrow(df_gini) + 1,] = list(Group = group, Gini = group_gini)\r\n  }\r\n  \r\n  \r\n  return(df_gini)\r\n}\r\n\r\n\r\n#=========================================================================#\r\n# WIP\r\n#=========================================================================#\r\n\r\n\r\ncalc_sib_gini <- function(dataframe) {\r\n  \r\n  ## Calculate Gini for entire population\r\n  # Reshape such that there is only one income column\r\n  dataframe_long <- dataframe %>%\r\n    pivot_longer(cols = starts_with(\"Income\"),\r\n                 names_to = \"Sibling\",\r\n                 values_to = \"Income\")\r\n  \r\n  # Within sibling\r\n  n = length(dataframe$Income)\r\n  \r\n  mad = sum(abs(dataframe$Income - dataframe$Income_SSS)) / n\r\n  rmad = mad / mean(dataframe_long$Income)\r\n  gini = 0.5 * rmad * n/(n-1)\r\n  \r\n  return(dataframe_long)\r\n  \r\n}\r\n\r\n# Sibling Gini for each group\r\ncalc_sib_groub_gini <- function(dataframe) {\r\n  \r\n  # Setup table\r\n  df_gini <- data.frame(matrix(ncol = 3, nrow = 0))\r\n  colnames(df_gini) <- c(\"Group\", \"Within_SSS\", \"Total\")\r\n  \r\n  # Need long version of data\r\n  dataframe_long <- dataframe %>%\r\n    pivot_longer(cols = starts_with(\"Income\"),\r\n                 names_to = \"Sibling\",\r\n                 values_to = \"Income\")\r\n  \r\n  # Aggregates are easy\r\n  all_within_SSS_gini = calc_sib_gini(dataframe)\r\n  all_total_gini <- calc_total_gini(dataframe_long)\r\n  \r\n  # Fill in the All category\r\n  df_gini[nrow(df_gini) + 1,] = list(Group = \"All\", Within_SSS = all_within_SSS_gini, Total = all_total_gini)\r\n  \r\n  # Iterate over groups\r\n  for(group in unique(dataframe$Group)){\r\n    # Calculate group Gini and sibling gini\r\n    df_group <- df %>% filter(Group == group)\r\n    \r\n    group_gini <- calc_total_gini(df_group)\r\n    group_sib_gini <- calc_sib_gini(df_group)\r\n    \r\n    \r\n    # Add to group\r\n    df_gini[nrow(df_gini) + 1,] = list(Group = group, Within_SSS = group_sib_gini, Total = group_gini)\r\n  }\r\n  \r\n  return(df_gini)\r\n}\r\n\r\n\r\nprint(calc_sib_gini(df), n=50)\r\n\r\n\r\n# Testing for it\r\n\r\ncalc_total_gini <- function(inc_vector){\r\n  # Get incomes\r\n  \r\n  incomes = inc_vector\r\n  n = length(incomes)\r\n  \r\n  # Need to divide and multiply to divide by the right amount and get the correct mean\r\n  mad = sum(as.numeric(dist(incomes))) / (0.5 * n^2)\r\n  rmad = mad / mean(incomes)\r\n  gini = 0.5 * rmad * n/(n-1)\r\n  print(mad)\r\n  print(mean(incomes))\r\n  \r\n  # Get all possible pairs\r\n  return(gini)\r\n}\r\n\r\ninc_men <- c(1,1,5)\r\ninc_wom <- c(1,1,5)\r\ninc_all <- c(inc_men, inc_wom)\r\n\r\ncalc_total_gini(inc_men)\r\ncalc_total_gini(inc_wom)\r\ncalc_total_gini(inc_all)\r\n\r\n\r\n\r\n\r\n","type":"text"}]
