httpuv::runStaticServer("docs/", port=8008)
httpuv::runStaticServer("C:/Programming/Code/Wendy-RA/Working/Pages/Fair_Inequality/myapp/docs/", port=8008)
httpuv::runStaticServer("C:/Programming/Code/Wendy-RA/Working/Pages/Fair_Inequality/docs/", port=8008)
vec1 <- c(0.5,0.75,1,1.25,1.5)
vec2 <- c(1,1.5,2,2.5,3)
df_gini = data.frame(c(vec1,vec2))
df
df_gini
df_gini = data.frame(vec1, vec2)
group1 <- to_vec(for(i in 1:5) "Man")
library(comprehenr)
install.packages(comprehenr)
install.packages("comprehenr")
library(comprehenr)
group1 <- to_vec(for(i in 1:5) "Man")
n_indivs = 5
base_income_woman = 1
base_income_man = 2*base_income_woman
income_step = 0.25
n_indivs_step = floor(n_indivs/2)
incomes_woman = to_vec(for(i in -n_indivs_step:n_indivs_step) base_income_woman + income_step * i)
n_indivs = 5
base_income_woman = 1
base_income_man = 2*base_income_woman
income_step = 0.25
n_indivs_step = floor(n_indivs/2)
incomes_woman = to_vec(for(i in -n_indivs_step:n_indivs_step) base_income_woman + income_step * i)
incomes_man = to_vec(for(i in -n_indivs_step:n_indivs_step) base_income_man + 2*income_step * i)
group_woman <- to_vec(for(i in 1:n_indivs) "Woman")
group_man <- to_vec(for(i in 1:n_indivs) "Man")
df_man = data.frame(incomes_man, group_man).rename(columns=c("Income", "Group"))
n_indivs = 5
base_income_woman = 1
base_income_man = 2*base_income_woman
income_step = 0.25
n_indivs_step = floor(n_indivs/2)
incomes_woman = to_vec(for(i in -n_indivs_step:n_indivs_step) base_income_woman + income_step * i)
incomes_man = to_vec(for(i in -n_indivs_step:n_indivs_step) base_income_man + 2*income_step * i)
group_woman <- to_vec(for(i in 1:n_indivs) "Woman")
group_man <- to_vec(for(i in 1:n_indivs) "Man")
df = data.frame(c(incomes_man, incomes_woman), c(group_man, group_woman))
df
colnames(df) <- c("Income", "Group")
outer(incomes_man)
outer(incomes_man, incomes_man)
as.numeric(dist(incomes_man))
# Calculate total Gini
calc_total_gini <- function(dataframe){
# Get incomes
incomes = dataframe$Income
n = length(incomes)
mad = mean(as.numeric(dist(incomes)))
rmad = 0.5*mad * n/(n-1)
# Get all possible pairs
}
calc_total_gini(df)
calc_total_gini <- function(dataframe){
# Get incomes
incomes = dataframe$Income
n = length(incomes)
mad = mean(as.numeric(dist(incomes)))
rmad = mad / mean(incomes)
gini = 0.5 * mad * n/(n-1)
# Get all possible pairs
return(gini)
}
calc_total_gini(df)
# Calculate total Gini
calc_total_gini <- function(dataframe){
# Get incomes
incomes = dataframe$Income
n = length(incomes)
mad = mean(as.numeric(dist(incomes)))
print(mad)
rmad = mad / mean(incomes)
gini = 0.5 * mad * n/(n-1)
# Get all possible pairs
return(gini)
}
calc_total_gini(df)
# Calculate total Gini
calc_total_gini <- function(dataframe){
# Get incomes
incomes = dataframe$Income
n = length(incomes)
mad = mean(as.numeric(dist(incomes)))
print(mad, n)
rmad = mad / mean(incomes)
gini = 0.5 * mad * n/(n-1)
# Get all possible pairs
return(gini)
}
calc_total_gini(df)
# Calculate total Gini
calc_total_gini <- function(dataframe){
# Get incomes
incomes = dataframe$Income
n = length(incomes)
mad = mean(as.numeric(dist(incomes)))
print(n)
rmad = mad / mean(incomes)
gini = 0.5 * mad * n/(n-1)
# Get all possible pairs
return(gini)
}
calc_total_gini(df)
as.numeric(dist(incomes_man))
mean(as.numeric(dist(incomes_man)))
mean(c(dist(incomes_man)))
c(dist(incomes_man))
calc_total_gini(df)
c(dist(incomes_man))
mean(c(dist(incomes_man)))
# Calculate total Gini
calc_total_gini <- function(dataframe){
# Get incomes
incomes = dataframe$Income
n = length(incomes)
mad = mean(as.numeric(dist(incomes)))
rmad = mad / mean(incomes)
gini = 0.5 * rmad * n/(n-1)
# Get all possible pairs
return(gini)
}
calc_total_gini(df)
0.5 * n/(n-1) * mean(c(dist(incomes_man))) / mean(incomes_man)
0.5 * 5/(5-1) * mean(c(dist(incomes_man))) / mean(incomes_man)
0.5 * 5/(5-1) * c(dist(incomes_man)) / (mean(incomes_man) * 10)
0.5 * 5/(5-1) * sum(c(dist(incomes_man))) / (mean(incomes_man) * 10)
# Calculate total Gini
calc_total_gini <- function(dataframe){
# Get incomes
incomes = dataframe$Income
n = length(incomes)
mad = sum(as.numeric(dist(incomes))) / (0.5 * n^2)
rmad = mad / mean(incomes)
gini = 0.5 * rmad * n/(n-1)
# Get all possible pairs
return(gini)
}
calc_total_gini(df)
df$Group.unique()
unique(df$Group)
calc_group_gini <- function(dataframe){
df_gini <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(df_gini) <- c("Group", "Gini")
for(group in unique(dataframe$Group)){
print(group)
}
}
calc_group_gini(df)
library(tidyverse)
df %>% group_by("Group") %>% summarise(gini = calc_total_gini(.))
df %>% group_by(Group) %>% summarise(gini = calc_total_gini(.))
calc_group_gini <- function(dataframe){
df_gini <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(df_gini) <- c("Group", "Gini")
# Iterate over groups
for(group in unique(dataframe$Group)){
df_group <- df %>% filter(Group == group)
group_gini = calc_total_gini(df_group)
df_gini %>% add_row(Group = group, Gini = group_gini)
}
return df_gini
calc_group_gini <- function(dataframe){
df_gini <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(df_gini) <- c("Group", "Gini")
# Iterate over groups
for(group in unique(dataframe$Group)){
df_group <- df %>% filter(Group == group)
group_gini = calc_total_gini(df_group)
df_gini %>% add_row(Group = group, Gini = group_gini)
}
return(df_gini)
}
calc_group_gini(df)
calc_group_gini <- function(dataframe){
df_gini <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(df_gini) <- c("Group", "Gini")
# Iterate over groups
for(group in unique(dataframe$Group)){
df_group <- df %>% filter(Group == group)
group_gini <- calc_total_gini(df_group)
df_gini %>% add_row(Group = group, Gini = group_gini)
}
return(df_gini)
}
calc_group_gini(df)
calc_group_gini <- function(dataframe){
df_gini <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(df_gini) <- c("Group", "Gini")
# Iterate over groups
for(group in unique(dataframe$Group)){
df_group <- df %>% filter(Group == group)
group_gini <- calc_total_gini(df_group)
print(group)
print(group_gini)
df_gini %>% add_row(Group = group, Gini = group_gini)
}
return(df_gini)
}
calc_group_gini(df)
calc_group_gini <- function(dataframe){
df_gini <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(df_gini) <- c("Group", "Gini")
# Iterate over groups
for(group in unique(dataframe$Group)){
df_group <- df %>% filter(Group == group)
group_gini <- calc_total_gini(df_group)
print(group)
print(group_gini)
df_gini %>% add_row(Group = group, Gini = group_gini)
df_gini[nrow(df_gini) + 1,] = list(Group = group, Gini = group_gini)
}
return(df_gini)
}
calc_group_gini(df)
calc_group_gini <- function(dataframe){
df_gini <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(df_gini) <- c("Group", "Gini")
# Iterate over groups
for(group in unique(dataframe$Group)){
df_group <- df %>% filter(Group == group)
group_gini <- calc_total_gini(df_group)
print(group)
print(group_gini)
df_gini[nrow(df_gini) + 1,] = list(Group = group, Gini = group_gini)
}
return(df_gini)
}
calc_group_gini(df)
calc_group_gini <- function(dataframe){
df_gini <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(df_gini) <- c("Group", "Gini")
# Iterate over groups
for(group in unique(dataframe$Group)){
# Calculate group Gini
df_group <- df %>% filter(Group == group)
group_gini <- calc_total_gini(df_group)
# Add to group
df_gini[nrow(df_gini) + 1,] = list(Group = group, Gini = group_gini)
}
# Calculate total Gini and add
total_gini <- calc_total_gini(dataframe)
df_gini[nrow(df_gini) + 1,] = list(Group = "All", Gini = total_gini)
return(df_gini)
}
calc_group_gini(df)
calc_group_gini <- function(dataframe){
df_gini <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(df_gini) <- c("Group", "Gini")
# Calculate total Gini and add
total_gini <- calc_total_gini(dataframe)
df_gini[nrow(df_gini) + 1,] = list(Group = "All", Gini = total_gini)
# Iterate over groups
for(group in unique(dataframe$Group)){
# Calculate group Gini
df_group <- df %>% filter(Group == group)
group_gini <- calc_total_gini(df_group)
# Add to group
df_gini[nrow(df_gini) + 1,] = list(Group = group, Gini = group_gini)
}
return(df_gini)
}
calc_group_gini(df)
